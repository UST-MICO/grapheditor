{"id": 0, "name": "", "kind": 0, "flags": {}, "children": [{"id": 1, "name": "drop-zone", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 11, "name": "NodeDropZone", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Description of a NodeDropZone."}, "children": [{"id": 13, "name": "bbox", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The bounding box of the drop zone.", "text": "The coordinates of the bounding box are relative to the node the drop zone is in.\n"}, "sources": [{"fileName": "drop-zone.ts", "line": 35, "character": 8}], "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 15, "name": "blacklist", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The blacklist node-type filter of this dropzone.", "text": "Only active if the whitelist is empty.\n"}, "sources": [{"fileName": "drop-zone.ts", "line": 49, "character": 13}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}, {"id": 12, "name": "id", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The id of thedrop zone. (unique for all zones of the same node)"}, "sources": [{"fileName": "drop-zone.ts", "line": 28, "character": 6}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 14, "name": "whitelist", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The whitelist node-type filter of this dropzone.", "text": "If the whitelist is not empty any node-type not in the whitelist will be rejected.\n"}, "sources": [{"fileName": "drop-zone.ts", "line": 42, "character": 13}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [13, 15, 12, 14]}], "sources": [{"fileName": "drop-zone.ts", "line": 25, "character": 29}]}, {"id": 6, "name": "calculateSquaredDistanceFromNodeToDropZone", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "drop-zone.ts", "line": 85, "character": 58}], "signatures": [{"id": 7, "name": "calculateSquaredDistanceFromNodeToDropZone", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the squared distance between the dropzone center and a node.", "text": "The squared distance is enough to find the closest drop zone.\n"}, "parameters": [{"id": 8, "name": "dropZoneAnchor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the anchor point of this dropzone (usually the node of the dropzone)"}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 9, "name": "dropZone", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the drop zone"}, "type": {"type": "reference", "id": 11, "name": "NodeDropZone"}}, {"id": 10, "name": "nodePosition", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the position of the node that may be dropped in this dropzone\n"}, "type": {"type": "reference", "id": 161, "name": "Point"}}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 2, "name": "filterDropzonesByType", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "drop-zone.ts", "line": 60, "character": 38}], "signatures": [{"id": 3, "name": "filterDropzonesByType", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generator returning all dropzones that are compatible with the given node type.", "text": "See blacklist and whitelist of NodeDropZone for the filter criterium.\n"}, "parameters": [{"id": 4, "name": "zones", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "all possible drop zones"}, "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 11, "name": "NodeDropZone"}], "name": "Map"}}, {"id": 5, "name": "nodeType", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node type to check\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "id": 11, "name": "NodeDropZone"}], "name": "Iterable"}}]}], "groups": [{"title": "Interfaces", "kind": 256, "children": [11]}, {"title": "Functions", "kind": 64, "children": [6, 2]}], "sources": [{"fileName": "drop-zone.ts", "line": 1, "character": 0}]}, {"id": 16, "name": "dynamic-templates/dynamic-template", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 80, "name": "DefaultTextComponentTemplate", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Default implementation of the dynamic text component template interface.", "text": "Adds a single text element to the group.\n"}, "children": [{"id": 81, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 82, "name": "new DefaultTextComponentTemplate", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 80, "name": "DefaultTextComponentTemplate"}}]}, {"id": 83, "name": "renderInitialTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 161, "character": 25}], "signatures": [{"id": 84, "name": "renderInitialTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {}, "parameters": [{"id": 85, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 172, "name": "TextComponent"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 86, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 87, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "implementationOf": {"type": "reference", "id": 66, "name": "DynamicTextComponentTemplate.renderInitialTemplate"}}], "implementationOf": {"type": "reference", "id": 65, "name": "DynamicTextComponentTemplate.renderInitialTemplate"}}, {"id": 93, "name": "updateAfterTextwrapping", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 169, "character": 27}], "signatures": [{"id": 94, "name": "updateAfterTextwrapping", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Same as the `updateTemplate` function but called after text was wrapped.", "text": "This function can be used to change the template according to the actual text measures.\n"}, "parameters": [{"id": 95, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 172, "name": "TextComponent"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 96, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 97, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "implementationOf": {"type": "reference", "id": 76, "name": "DynamicTextComponentTemplate.updateAfterTextwrapping"}}], "implementationOf": {"type": "reference", "id": 75, "name": "DynamicTextComponentTemplate.updateAfterTextwrapping"}}, {"id": 88, "name": "updateTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 165, "character": 18}], "signatures": [{"id": 89, "name": "updateTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {}, "parameters": [{"id": 90, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 172, "name": "TextComponent"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 91, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 92, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "implementationOf": {"type": "reference", "id": 71, "name": "DynamicTextComponentTemplate.updateTemplate"}}], "implementationOf": {"type": "reference", "id": 70, "name": "DynamicTextComponentTemplate.updateTemplate"}}], "groups": [{"title": "Constructors", "kind": 512, "children": [81]}, {"title": "Methods", "kind": 2048, "children": [83, 93, 88]}], "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 159, "character": 41}], "implementedTypes": [{"type": "reference", "id": 64, "name": "DynamicTextComponentTemplate"}]}, {"id": 21, "name": "DynamicChildElementTemplateContext", "kind": 256, "kindString": "Interface", "flags": {}, "children": [{"id": 22, "name": "parent", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 30, "character": 10}], "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 205, "name": "Edge"}]}}], "groups": [{"title": "Properties", "kind": 1024, "children": [22]}], "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 29, "character": 51}], "extendedTypes": [{"type": "reference", "id": 17, "typeArguments": [{"type": "union", "types": [{"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 172, "name": "TextComponent"}]}], "name": "DynamicTemplateContext"}]}, {"id": 50, "name": "DynamicMarkerTemplate", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for dynamic marker/link-handle templates."}, "children": [{"id": 61, "name": "getLineAttachementInfo", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 62, "name": "getLineAttachementInfo", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the LineAttachement info that is used to calculate the actual point\nwhere the edge attaches to the marker if it is an end marker.", "text": "This method can safely return `null` (defaults to no offset).\n"}, "parameters": [{"id": 63, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the selection of the marker group\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "reference", "id": 1117, "name": "LineAttachementInfo"}}]}, {"id": 51, "name": "renderInitialTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 52, "name": "renderInitialTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"tags": [{"tag": "override", "text": ""}]}, "parameters": [{"id": 53, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "union", "types": [{"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}]}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 54, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 55, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering\n"}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "overwrites": {"type": "reference", "id": 25, "name": "DynamicTemplate.renderInitialTemplate"}}], "overwrites": {"type": "reference", "id": 24, "name": "DynamicTemplate.renderInitialTemplate"}}, {"id": 56, "name": "updateTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 57, "name": "updateTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"tags": [{"tag": "override", "text": ""}]}, "parameters": [{"id": 58, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "union", "types": [{"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}]}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 59, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 60, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering\n"}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "overwrites": {"type": "reference", "id": 30, "name": "DynamicTemplate.updateTemplate"}}], "overwrites": {"type": "reference", "id": 29, "name": "DynamicTemplate.updateTemplate"}}], "groups": [{"title": "Methods", "kind": 2048, "children": [61, 51, 56]}], "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 92, "character": 38}], "extendedTypes": [{"type": "reference", "id": 23, "typeArguments": [{"type": "union", "types": [{"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}]}], "name": "DynamicTemplate"}]}, {"id": 35, "name": "DynamicNodeTemplate", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for dynamic templates for graph nodes."}, "children": [{"id": 36, "name": "getLinkHandles", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 37, "name": "getLinkHandles", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the link handle list for the current node.", "text": "This function should not update the group itself!\n"}, "parameters": [{"id": 38, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 39, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph\n"}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}, {"id": 40, "name": "renderInitialTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 41, "name": "renderInitialTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "The initial render function that renders the (static part of) template structure into the svg group.", "text": "This function is called once every time a node is assigned to this dynamic template.\nThe svg group is empty when this function gets called.\nThe intention of this function is to render the static structure of the template and not\nthe dynamic content of the template. The dynamic contetn should be rendered in\nthe `updateTemplate` function.\n"}, "parameters": [{"id": 42, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group the template should be rendered into, (an empty `<g>`)"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 43, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 44, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering (default: `null`)\n"}, "type": {"type": "reference", "id": 17, "typeArguments": [{"type": "reference", "id": 1129, "name": "Node"}], "name": "DynamicTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "inheritedFrom": {"type": "reference", "id": 25, "name": "DynamicTemplate.renderInitialTemplate"}}], "inheritedFrom": {"type": "reference", "id": 24, "name": "DynamicTemplate.renderInitialTemplate"}}, {"id": 45, "name": "updateTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 46, "name": "updateTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "The update function updates the dynamic parts of the template.", "text": "This function will be called on every graph render. It will only be called after\n`renderInitialTemplate` was called for this group.\nDynamic text and other dynamic content that is already implemented for static\ntemplates can be used by setting the corresponding attributes and classes.\nThis is preferred over updating the text in this function.\n"}, "parameters": [{"id": 47, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 48, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 49, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering (default: `null`)\n"}, "type": {"type": "reference", "id": 17, "typeArguments": [{"type": "reference", "id": 1129, "name": "Node"}], "name": "DynamicTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "inheritedFrom": {"type": "reference", "id": 30, "name": "DynamicTemplate.updateTemplate"}}], "inheritedFrom": {"type": "reference", "id": 29, "name": "DynamicTemplate.updateTemplate"}}], "groups": [{"title": "Methods", "kind": 2048, "children": [36, 40, 45]}], "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 77, "character": 36}], "extendedTypes": [{"type": "reference", "id": 23, "typeArguments": [{"type": "reference", "id": 1129, "name": "Node"}], "name": "DynamicTemplate"}], "implementedBy": [{"type": "reference", "id": 132, "name": "DynamicBoxTemplate"}]}, {"id": 23, "name": "DynamicTemplate", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for dynamic templates.", "text": "A dynamic template should **never** store any state as it may be used by many nodes!\nAs the dynamic template mechanism only complements the normal static template\nmechanism all dynamic templates can benefit from the dynamic content loading\nalready implemented for static templates. Text injection and other things can still\nbe used with dynamic templates by setting the right attributes and classes.\n"}, "children": [{"id": 24, "name": "renderInitialTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 25, "name": "renderInitialTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "The initial render function that renders the (static part of) template structure into the svg group.", "text": "This function is called once every time a node is assigned to this dynamic template.\nThe svg group is empty when this function gets called.\nThe intention of this function is to render the static structure of the template and not\nthe dynamic content of the template. The dynamic contetn should be rendered in\nthe `updateTemplate` function.\n"}, "parameters": [{"id": 26, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group the template should be rendered into, (an empty `<g>`)"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "name": "T"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 27, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 28, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering (default: `null`)\n"}, "type": {"type": "reference", "id": 17, "typeArguments": [{"type": "reference", "name": "T"}], "name": "DynamicTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 29, "name": "updateTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 30, "name": "updateTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "The update function updates the dynamic parts of the template.", "text": "This function will be called on every graph render. It will only be called after\n`renderInitialTemplate` was called for this group.\nDynamic text and other dynamic content that is already implemented for static\ntemplates can be used by setting the corresponding attributes and classes.\nThis is preferred over updating the text in this function.\n"}, "parameters": [{"id": 31, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "name": "T"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 32, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 33, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering (default: `null`)\n"}, "type": {"type": "reference", "id": 17, "typeArguments": [{"type": "reference", "name": "T"}], "name": "DynamicTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Methods", "kind": 2048, "children": [24, 29]}], "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 42, "character": 32}], "typeParameter": [{"id": 34, "name": "T", "kind": 131072, "kindString": "Type parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 172, "name": "TextComponent"}]}}], "extendedBy": [{"type": "reference", "id": 35, "name": "DynamicNodeTemplate"}, {"type": "reference", "id": 50, "name": "DynamicMarkerTemplate"}, {"type": "reference", "id": 64, "name": "DynamicTextComponentTemplate"}]}, {"id": 17, "name": "DynamicTemplateContext", "kind": 256, "kindString": "Interface", "flags": {}, "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 25, "character": 39}], "typeParameter": [{"id": 18, "name": "T", "kind": 131072, "kindString": "Type parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "reference", "id": 172, "name": "TextComponent"}]}}], "indexSignature": {"id": 19, "name": "__index", "kind": 8192, "kindString": "Index signature", "flags": {}, "parameters": [{"id": 20, "name": "prop", "kind": 32768, "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "any"}}, "extendedBy": [{"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}]}, {"id": 64, "name": "DynamicTextComponentTemplate", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for dynamic text component templates."}, "children": [{"id": 65, "name": "renderInitialTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 66, "name": "renderInitialTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"tags": [{"tag": "override", "text": ""}]}, "parameters": [{"id": 67, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 172, "name": "TextComponent"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 68, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 69, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering\n"}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "overwrites": {"type": "reference", "id": 25, "name": "DynamicTemplate.renderInitialTemplate"}}], "overwrites": {"type": "reference", "id": 24, "name": "DynamicTemplate.renderInitialTemplate"}}, {"id": 75, "name": "updateAfterTextwrapping", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 76, "name": "updateAfterTextwrapping", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Same as the `updateTemplate` function but called after text was wrapped.", "text": "This function can be used to change the template according to the actual text measures.\n"}, "parameters": [{"id": 77, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 172, "name": "TextComponent"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 78, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 79, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering\n"}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 70, "name": "updateTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 71, "name": "updateTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"tags": [{"tag": "override", "text": ""}]}, "parameters": [{"id": 72, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 172, "name": "TextComponent"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 73, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor managing this graph"}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 74, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "additional context for rendering\n"}, "type": {"type": "reference", "id": 21, "name": "DynamicChildElementTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "overwrites": {"type": "reference", "id": 30, "name": "DynamicTemplate.updateTemplate"}}], "overwrites": {"type": "reference", "id": 29, "name": "DynamicTemplate.updateTemplate"}}], "groups": [{"title": "Methods", "kind": 2048, "children": [65, 75, 70]}], "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 124, "character": 45}], "extendedTypes": [{"type": "reference", "id": 23, "typeArguments": [{"type": "reference", "id": 172, "name": "TextComponent"}], "name": "DynamicTemplate"}], "implementedBy": [{"type": "reference", "id": 80, "name": "DefaultTextComponentTemplate"}]}], "groups": [{"title": "Classes", "kind": 128, "children": [80]}, {"title": "Interfaces", "kind": 256, "children": [21, 50, 35, 23, 17, 64]}], "sources": [{"fileName": "dynamic-templates/dynamic-template.ts", "line": 1, "character": 0}]}, {"id": 98, "name": "dynamic-templates/edge-path-generators", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 106, "name": "SmoothedEdgePathGenerator", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "An edge path generator that uses helper points and the d3 curve factories."}, "children": [{"id": 107, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 108, "name": "new SmoothedEdgePathGenerator", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "comment": {"shortText": "Create  a new path generator."}, "parameters": [{"id": 109, "name": "smoothing", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the curve factory to use to generate the path string"}, "type": {"type": "union", "types": [{"type": "reference", "name": "CurveFactory"}, {"type": "reference", "name": "CurveFactoryLineOnly"}]}}, {"id": 110, "name": "useOffsetPoints", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if true offset points in the direction of start and end normal will be used for the interpolation (default: `true`)"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "true"}, {"id": 111, "name": "offsetPointOffset", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the distance of the offset points (default: `1`)\n"}, "type": {"type": "intrinsic", "name": "number"}, "defaultValue": "1"}], "type": {"type": "reference", "id": 106, "name": "SmoothedEdgePathGenerator"}}]}, {"id": 112, "name": "lineGenerator", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 43, "character": 17}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "id": 161, "name": "Point"}], "name": "Line"}}, {"id": 114, "name": "offsetPointOffset", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 45, "character": 21}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 113, "name": "useOffsetPoints", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 44, "character": 19}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 115, "name": "generateEdgePath", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 63, "character": 20}], "signatures": [{"id": 116, "name": "generateEdgePath", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generate the path string for the `d` attribute of the svg `<path>` element."}, "parameters": [{"id": 117, "name": "start", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 118, "name": "end", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 119, "name": "startNormal", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}, {"id": 120, "name": "endNormal", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "type": {"type": "intrinsic", "name": "string"}, "implementationOf": {"type": "reference", "id": 101, "name": "EdgePathGenerator.generateEdgePath"}}], "implementationOf": {"type": "reference", "id": 100, "name": "EdgePathGenerator.generateEdgePath"}}], "groups": [{"title": "Constructors", "kind": 512, "children": [107]}, {"title": "Properties", "kind": 1024, "children": [112, 114, 113]}, {"title": "Methods", "kind": 2048, "children": [115]}], "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 42, "character": 38}], "implementedTypes": [{"type": "reference", "id": 99, "name": "EdgePathGenerator"}]}, {"id": 121, "name": "SteppedEdgePathGenerator", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "A naive stepping path generator that tries to produce the shortest path using only lines parallel to the axes."}, "children": [{"id": 122, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 123, "name": "new SteppedEdgePathGenerator", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 121, "name": "SteppedEdgePathGenerator"}}]}, {"id": 124, "name": "lineGenerator", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 88, "character": 17}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "id": 161, "name": "Point"}], "name": "Line"}, "defaultValue": "..."}, {"id": 125, "name": "generateEdgePath", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 93, "character": 20}], "signatures": [{"id": 126, "name": "generateEdgePath", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generate the path string for the `d` attribute of the svg `<path>` element."}, "parameters": [{"id": 127, "name": "start", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 128, "name": "end", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 129, "name": "startNormal", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}, {"id": 130, "name": "endNormal", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "type": {"type": "intrinsic", "name": "string"}, "implementationOf": {"type": "reference", "id": 101, "name": "EdgePathGenerator.generateEdgePath"}}], "implementationOf": {"type": "reference", "id": 100, "name": "EdgePathGenerator.generateEdgePath"}}], "groups": [{"title": "Constructors", "kind": 512, "children": [122]}, {"title": "Properties", "kind": 1024, "children": [124]}, {"title": "Methods", "kind": 2048, "children": [125]}], "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 87, "character": 37}], "implementedTypes": [{"type": "reference", "id": 99, "name": "EdgePathGenerator"}]}, {"id": 99, "name": "EdgePathGenerator", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for edge path generators.", "text": "A path generator is used to interpolate the edge path between two points.\n"}, "children": [{"id": 100, "name": "generateEdgePath", "kind": 2048, "kindString": "Method", "flags": {}, "signatures": [{"id": 101, "name": "generateEdgePath", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generate the path string for the `d` attribute of the svg `<path>` element."}, "parameters": [{"id": 102, "name": "start", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the starting point of the edge"}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 103, "name": "end", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the end point of the edge"}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 104, "name": "startNormal", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the normal of the link handle of the start point; may be `null` or `{dx: 0, dy: 0}`"}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}, {"id": 105, "name": "endNormal", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the normal of the link handle of the end point; may be `null` or `{dx: 0, dy: 0}`\n"}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "type": {"type": "intrinsic", "name": "string"}}]}], "groups": [{"title": "Methods", "kind": 2048, "children": [100]}], "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 27, "character": 34}], "implementedBy": [{"type": "reference", "id": 106, "name": "SmoothedEdgePathGenerator"}, {"type": "reference", "id": 121, "name": "SteppedEdgePathGenerator"}]}], "groups": [{"title": "Classes", "kind": 128, "children": [106, 121]}, {"title": "Interfaces", "kind": 256, "children": [99]}], "sources": [{"fileName": "dynamic-templates/edge-path-generators.ts", "line": 1, "character": 0}]}, {"id": 131, "name": "dynamic-templates/examples", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 132, "name": "DynamicBoxTemplate", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Example dynamic node template rendering a `rect` centered around (0, 0)."}, "children": [{"id": 133, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 134, "name": "new DynamicBoxTemplate", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "comment": {"shortText": "Create a new dynamic node template."}, "parameters": [{"id": 135, "name": "linkHandleOptions", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "link handle options for a `rect` default: 'edges'\n"}, "type": {"type": "intrinsic", "name": "string"}, "defaultValue": "'edges'"}], "type": {"type": "reference", "id": 132, "name": "DynamicBoxTemplate"}}]}, {"id": 136, "name": "linkHandleOptions", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "dynamic-templates/examples.ts", "line": 29, "character": 29}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 147, "name": "getLinkHandles", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/examples.ts", "line": 59, "character": 18}], "signatures": [{"id": 148, "name": "getLinkHandles", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the link handle list for the current node.", "text": "This function should not update the group itself!\n"}, "parameters": [{"id": 149, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 150, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}, "implementationOf": {"type": "reference", "id": 37, "name": "DynamicNodeTemplate.getLinkHandles"}}], "implementationOf": {"type": "reference", "id": 36, "name": "DynamicNodeTemplate.getLinkHandles"}}, {"id": 137, "name": "renderInitialTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/examples.ts", "line": 40, "character": 25}], "signatures": [{"id": 138, "name": "renderInitialTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "The initial render function that renders the (static part of) template structure into the svg group.", "text": "This function is called once every time a node is assigned to this dynamic template.\nThe svg group is empty when this function gets called.\nThe intention of this function is to render the static structure of the template and not\nthe dynamic content of the template. The dynamic contetn should be rendered in\nthe `updateTemplate` function.\n"}, "parameters": [{"id": 139, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 140, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 141, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 17, "typeArguments": [{"type": "reference", "id": 1129, "name": "Node"}], "name": "DynamicTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "implementationOf": {"type": "reference", "id": 41, "name": "DynamicNodeTemplate.renderInitialTemplate"}}], "implementationOf": {"type": "reference", "id": 40, "name": "DynamicNodeTemplate.renderInitialTemplate"}}, {"id": 142, "name": "updateTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "dynamic-templates/examples.ts", "line": 45, "character": 18}], "signatures": [{"id": 143, "name": "updateTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "The update function updates the dynamic parts of the template.", "text": "This function will be called on every graph render. It will only be called after\n`renderInitialTemplate` was called for this group.\nDynamic text and other dynamic content that is already implemented for static\ntemplates can be used by setting the corresponding attributes and classes.\nThis is preferred over updating the text in this function.\n"}, "parameters": [{"id": 144, "name": "g", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 145, "name": "grapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 146, "name": "context", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 17, "typeArguments": [{"type": "reference", "id": 1129, "name": "Node"}], "name": "DynamicTemplateContext"}}], "type": {"type": "intrinsic", "name": "void"}, "implementationOf": {"type": "reference", "id": 46, "name": "DynamicNodeTemplate.updateTemplate"}}], "implementationOf": {"type": "reference", "id": 45, "name": "DynamicNodeTemplate.updateTemplate"}}], "groups": [{"title": "Constructors", "kind": 512, "children": [133]}, {"title": "Properties", "kind": 1024, "children": [136]}, {"title": "Methods", "kind": 2048, "children": [147, 137, 142]}], "sources": [{"fileName": "dynamic-templates/examples.ts", "line": 27, "character": 31}], "implementedTypes": [{"type": "reference", "id": 35, "name": "DynamicNodeTemplate"}]}], "groups": [{"title": "Classes", "kind": 128, "children": [132]}], "sources": [{"fileName": "dynamic-templates/examples.ts", "line": 1, "character": 0}]}, {"id": 151, "name": "edge", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 221, "name": "DraggedEdge", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Extra attributes for edges dragged bay a user."}, "children": [{"id": 223, "name": "createdFrom", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If edge was created from an existing edge this is the id of the existing edge."}, "sources": [{"fileName": "edge.ts", "line": 205, "character": 15}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 225, "name": "currentTarget", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The current target coordinates."}, "sources": [{"fileName": "edge.ts", "line": 209, "character": 17}], "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 236, "name": "dragHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "List of EdgeDragHandle that can be used to drag the edge with.", "text": "If the list is `null` a list containing default drag handle will be created.\nIf the list is an empty list `[]` no default drag handle will be created.\nIf `isBidirectional` is `true` and the list is `null` a list containing two\ndefault drag handles (one for each end) will be created.\n"}, "sources": [{"fileName": "edge.ts", "line": 188, "character": 15}], "type": {"type": "array", "elementType": {"type": "reference", "id": 189, "name": "EdgeDragHandle"}}, "inheritedFrom": {"type": "reference", "id": 217, "name": "Edge.dragHandles"}}, {"id": 222, "name": "id", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Explicit id of the dragged edge.", "text": "A dragged edge may have no current target and must to specify an explicit id!\n"}, "sources": [{"fileName": "edge.ts", "line": 203, "character": 6}], "type": {"type": "intrinsic", "name": "string"}, "overwrites": {"type": "reference", "id": 206, "name": "Edge.id"}}, {"id": 237, "name": "isBidirectional", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Set this to `true` if the edge should be treated as bidirectional (see `dragHandles`)."}, "sources": [{"fileName": "edge.ts", "line": 190, "character": 19}], "type": {"type": "intrinsic", "name": "boolean"}, "inheritedFrom": {"type": "reference", "id": 218, "name": "Edge.isBidirectional"}}, {"id": 234, "name": "markerEnd", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Markers to draw at the end of this edge."}, "sources": [{"fileName": "edge.ts", "line": 177, "character": 13}], "type": {"type": "reference", "id": 1102, "name": "Marker"}, "inheritedFrom": {"type": "reference", "id": 215, "name": "Edge.markerEnd"}}, {"id": 233, "name": "markerStart", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Markers to draw at the start of this edge."}, "sources": [{"fileName": "edge.ts", "line": 175, "character": 15}], "type": {"type": "reference", "id": 1102, "name": "Marker"}, "inheritedFrom": {"type": "reference", "id": 214, "name": "Edge.markerStart"}}, {"id": 232, "name": "markers", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "List of markers to draw for this edge."}, "sources": [{"fileName": "edge.ts", "line": 173, "character": 11}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1102, "name": "Marker"}}, "inheritedFrom": {"type": "reference", "id": 213, "name": "Edge.markers"}}, {"id": 231, "name": "pathType", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The id of the path generator used for this edge."}, "sources": [{"fileName": "edge.ts", "line": 171, "character": 12}], "type": {"type": "intrinsic", "name": "string"}, "inheritedFrom": {"type": "reference", "id": 212, "name": "Edge.pathType"}}, {"id": 226, "name": "source", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The id of the source node of this edge."}, "sources": [{"fileName": "edge.ts", "line": 153, "character": 10}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}, "inheritedFrom": {"type": "reference", "id": 207, "name": "Edge.source"}}, {"id": 228, "name": "sourceHandle", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The link handle of the source node the edge is attached to.", "text": "This attribute is set automatically by the grapheditor.\n"}, "sources": [{"fileName": "edge.ts", "line": 161, "character": 16}], "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}, "inheritedFrom": {"type": "reference", "id": 209, "name": "Edge.sourceHandle"}}, {"id": 227, "name": "target", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The id of the target node of this edge."}, "sources": [{"fileName": "edge.ts", "line": 155, "character": 10}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}, "inheritedFrom": {"type": "reference", "id": 208, "name": "Edge.target"}}, {"id": 229, "name": "targetHandle", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The link handle of the target node the edge is attached to.", "text": "This attribute is set automatically by the grapheditor.\n"}, "sources": [{"fileName": "edge.ts", "line": 167, "character": 16}], "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}, "inheritedFrom": {"type": "reference", "id": 210, "name": "Edge.targetHandle"}}, {"id": 235, "name": "texts", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "List of text components of this edge."}, "sources": [{"fileName": "edge.ts", "line": 179, "character": 9}], "type": {"type": "array", "elementType": {"type": "reference", "id": 172, "name": "TextComponent"}}, "inheritedFrom": {"type": "reference", "id": 216, "name": "Edge.texts"}}, {"id": 230, "name": "type", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Edge type. Can be used for styling."}, "sources": [{"fileName": "edge.ts", "line": 169, "character": 8}], "type": {"type": "intrinsic", "name": "any"}, "inheritedFrom": {"type": "reference", "id": 211, "name": "Edge.type"}}, {"id": 224, "name": "validTargets", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "A set of ids of nodes that are a valid target for this edge."}, "sources": [{"fileName": "edge.ts", "line": 207, "character": 16}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [223, 225, 236, 222, 237, 234, 233, 232, 231, 226, 228, 227, 229, 235, 230, 224]}], "sources": [{"fileName": "edge.ts", "line": 197, "character": 28}], "extendedTypes": [{"type": "reference", "id": 205, "name": "Edge"}]}, {"id": 205, "name": "Edge", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for edges between nodes."}, "children": [{"id": 217, "name": "dragHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "List of EdgeDragHandle that can be used to drag the edge with.", "text": "If the list is `null` a list containing default drag handle will be created.\nIf the list is an empty list `[]` no default drag handle will be created.\nIf `isBidirectional` is `true` and the list is `null` a list containing two\ndefault drag handles (one for each end) will be created.\n"}, "sources": [{"fileName": "edge.ts", "line": 188, "character": 15}], "type": {"type": "array", "elementType": {"type": "reference", "id": 189, "name": "EdgeDragHandle"}}}, {"id": 206, "name": "id", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "An optional explicit edge id.", "text": "The edge id is normally computed by the `edgeId` function.\nIf this attribute is set it gets returned by `edgeId` instead of the computed id.\n"}, "sources": [{"fileName": "edge.ts", "line": 151, "character": 6}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 218, "name": "isBidirectional", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Set this to `true` if the edge should be treated as bidirectional (see `dragHandles`)."}, "sources": [{"fileName": "edge.ts", "line": 190, "character": 19}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 215, "name": "markerEnd", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Markers to draw at the end of this edge."}, "sources": [{"fileName": "edge.ts", "line": 177, "character": 13}], "type": {"type": "reference", "id": 1102, "name": "Marker"}}, {"id": 214, "name": "markerStart", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Markers to draw at the start of this edge."}, "sources": [{"fileName": "edge.ts", "line": 175, "character": 15}], "type": {"type": "reference", "id": 1102, "name": "Marker"}}, {"id": 213, "name": "markers", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "List of markers to draw for this edge."}, "sources": [{"fileName": "edge.ts", "line": 173, "character": 11}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1102, "name": "Marker"}}}, {"id": 212, "name": "pathType", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The id of the path generator used for this edge."}, "sources": [{"fileName": "edge.ts", "line": 171, "character": 12}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 207, "name": "source", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The id of the source node of this edge."}, "sources": [{"fileName": "edge.ts", "line": 153, "character": 10}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 209, "name": "sourceHandle", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The link handle of the source node the edge is attached to.", "text": "This attribute is set automatically by the grapheditor.\n"}, "sources": [{"fileName": "edge.ts", "line": 161, "character": 16}], "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}}, {"id": 208, "name": "target", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The id of the target node of this edge."}, "sources": [{"fileName": "edge.ts", "line": 155, "character": 10}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 210, "name": "targetHandle", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The link handle of the target node the edge is attached to.", "text": "This attribute is set automatically by the grapheditor.\n"}, "sources": [{"fileName": "edge.ts", "line": 167, "character": 16}], "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}}, {"id": 216, "name": "texts", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "List of text components of this edge."}, "sources": [{"fileName": "edge.ts", "line": 179, "character": 9}], "type": {"type": "array", "elementType": {"type": "reference", "id": 172, "name": "TextComponent"}}}, {"id": 211, "name": "type", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Edge type. Can be used for styling."}, "sources": [{"fileName": "edge.ts", "line": 169, "character": 8}], "type": {"type": "intrinsic", "name": "any"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [217, 206, 218, 215, 214, 213, 212, 207, 209, 208, 210, 216, 211]}], "sources": [{"fileName": "edge.ts", "line": 144, "character": 21}], "indexSignature": {"id": 219, "name": "__index", "kind": 8192, "kindString": "Index signature", "flags": {}, "comment": {"shortText": "Interface for edges between nodes."}, "parameters": [{"id": 220, "name": "prop", "kind": 32768, "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "any"}}, "extendedBy": [{"type": "reference", "id": 221, "name": "DraggedEdge"}]}, {"id": 189, "name": "EdgeDragHandle", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Special marker used as a drag handle for dragging an edge."}, "children": [{"id": 201, "name": "absolutePositionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The absolute position of the path element on the edge.", "text": "A positive value is counted from the start of the path.\nA negative value is counted from the end of the path.\nIf the absolute value is longer than the path length the relative\npositionOnLine will be used as fallback value.\n"}, "sources": [{"fileName": "edge.ts", "line": 44, "character": 26}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1113, "name": "Marker.absolutePositionOnLine"}}, {"id": 203, "name": "absoluteRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation angle in degree.", "text": "Absolute rotation overwrites any relative rotation.\n"}, "sources": [{"fileName": "rotation-vector.ts", "line": 35, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1115, "name": "Marker.absoluteRotation"}}, {"id": 199, "name": "clickEventKey", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A key used in a click event when the marker was clicked."}, "sources": [{"fileName": "marker.ts", "line": 41, "character": 17}], "type": {"type": "intrinsic", "name": "string"}, "inheritedFrom": {"type": "reference", "id": 1111, "name": "Marker.clickEventKey"}}, {"id": 202, "name": "ignorePathDirectionForRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the relative rotation is applied as if the path always goes from left to right."}, "sources": [{"fileName": "edge.ts", "line": 50, "character": 34}], "type": {"type": "intrinsic", "name": "boolean"}, "inheritedFrom": {"type": "reference", "id": 1114, "name": "Marker.ignorePathDirectionForRotation"}}, {"id": 192, "name": "isDynamicTemplate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True iff the link handle uses a dynamic template."}, "sources": [{"fileName": "marker.ts", "line": 28, "character": 21}], "type": {"type": "intrinsic", "name": "boolean"}, "inheritedFrom": {"type": "reference", "id": 1104, "name": "Marker.isDynamicTemplate"}}, {"id": 190, "name": "isReverseHandle", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true dragging this drag handle will result in a flipped edge beeing dragged.", "text": "The flipped edge looks the same as the original edge but has source and target switched.\nAll component positions and relative rotations are updated accordingly.\nThis can be used to implement bidirectional or non-directional behaviour for edges.\n"}, "sources": [{"fileName": "edge.ts", "line": 111, "character": 19}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 200, "name": "positionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The relative position of the path element on the edge (between 0 and 1). (Default `0` == 'start')"}, "sources": [{"fileName": "edge.ts", "line": 35, "character": 18}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "number"}, {"type": "literal", "value": "start"}, {"type": "literal", "value": "end"}]}, "inheritedFrom": {"type": "reference", "id": 1112, "name": "Marker.positionOnLine"}}, {"id": 204, "name": "relativeRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Relative rotation angle in degree."}, "sources": [{"fileName": "rotation-vector.ts", "line": 37, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1116, "name": "Marker.relativeRotation"}}, {"id": 195, "name": "rotate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"tags": [{"tag": "deprecated", "text": "Rotation information for the marker. (Use `absoluteRotation` and `relativeRotation attributes instead!)"}]}, "sources": [{"fileName": "marker.ts", "line": 34, "character": 10}], "type": {"type": "reflection", "declaration": {"id": 196, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 197, "name": "normal", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation via direction vector."}, "sources": [{"fileName": "marker.ts", "line": 36, "character": 14}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}, {"id": 198, "name": "relativeAngle", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Relative angle in degree."}, "sources": [{"fileName": "marker.ts", "line": 38, "character": 21}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [197, 198]}]}}, "inheritedFrom": {"type": "reference", "id": 1107, "name": "Marker.rotate"}}, {"id": 193, "name": "scale", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A factor to scale the marker."}, "sources": [{"fileName": "marker.ts", "line": 30, "character": 9}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1105, "name": "Marker.scale"}}, {"id": 194, "name": "scaleRelative", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the marker and lineOffset is scaled relative to the stroke width."}, "sources": [{"fileName": "marker.ts", "line": 32, "character": 17}], "type": {"type": "intrinsic", "name": "boolean"}, "inheritedFrom": {"type": "reference", "id": 1106, "name": "Marker.scaleRelative"}}, {"id": 191, "name": "template", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "the marker template id to use for this marker."}, "sources": [{"fileName": "marker.ts", "line": 26, "character": 12}], "type": {"type": "intrinsic", "name": "string"}, "inheritedFrom": {"type": "reference", "id": 1103, "name": "Marker.template"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [201, 203, 199, 202, 192, 190, 200, 204, 195, 193, 194, 191]}], "sources": [{"fileName": "edge.ts", "line": 103, "character": 31}], "extendedTypes": [{"type": "reference", "id": 1102, "name": "Marker"}]}, {"id": 164, "name": "PathPositionRotationAndScale", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface describing the position of a marker, text component or link handle placed along an edge path."}, "children": [{"id": 166, "name": "absolutePositionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The absolute position of the path element on the edge.", "text": "A positive value is counted from the start of the path.\nA negative value is counted from the end of the path.\nIf the absolute value is longer than the path length the relative\npositionOnLine will be used as fallback value.\n"}, "sources": [{"fileName": "edge.ts", "line": 44, "character": 26}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 170, "name": "absoluteRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation angle in degree.", "text": "Absolute rotation overwrites any relative rotation.\n"}, "sources": [{"fileName": "rotation-vector.ts", "line": 35, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1346, "name": "RotationData.absoluteRotation"}}, {"id": 169, "name": "ignorePathDirectionForRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the relative rotation is applied as if the path always goes from left to right."}, "sources": [{"fileName": "edge.ts", "line": 50, "character": 34}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 165, "name": "positionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The relative position of the path element on the edge (between 0 and 1). (Default `0` == 'start')"}, "sources": [{"fileName": "edge.ts", "line": 35, "character": 18}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "number"}, {"type": "literal", "value": "start"}, {"type": "literal", "value": "end"}]}}, {"id": 171, "name": "relativeRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Relative rotation angle in degree."}, "sources": [{"fileName": "rotation-vector.ts", "line": 37, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1347, "name": "RotationData.relativeRotation"}}, {"id": 167, "name": "scale", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A factor to scale the path element."}, "sources": [{"fileName": "edge.ts", "line": 46, "character": 9}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 168, "name": "scaleRelative", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the scaling factor is applied relative to the stroke width."}, "sources": [{"fileName": "edge.ts", "line": 48, "character": 17}], "type": {"type": "intrinsic", "name": "boolean"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [166, 170, 169, 165, 171, 167, 168]}], "sources": [{"fileName": "edge.ts", "line": 33, "character": 45}], "extendedTypes": [{"type": "reference", "id": 1345, "name": "RotationData"}], "extendedBy": [{"type": "reference", "id": 172, "name": "TextComponent"}, {"type": "reference", "id": 1102, "name": "Marker"}]}, {"id": 161, "name": "Point", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "A single point."}, "children": [{"id": 162, "name": "x", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "edge.ts", "line": 26, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 163, "name": "y", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "edge.ts", "line": 27, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [162, 163]}], "sources": [{"fileName": "edge.ts", "line": 25, "character": 22}]}, {"id": 172, "name": "TextComponent", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for text components that are part of an edge."}, "children": [{"id": 183, "name": "absolutePositionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The absolute position of the path element on the edge.", "text": "A positive value is counted from the start of the path.\nA negative value is counted from the end of the path.\nIf the absolute value is longer than the path length the relative\npositionOnLine will be used as fallback value.\n"}, "sources": [{"fileName": "edge.ts", "line": 44, "character": 26}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 166, "name": "PathPositionRotationAndScale.absolutePositionOnLine"}}, {"id": 187, "name": "absoluteRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation angle in degree.", "text": "Absolute rotation overwrites any relative rotation.\n"}, "sources": [{"fileName": "rotation-vector.ts", "line": 35, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 170, "name": "PathPositionRotationAndScale.absoluteRotation"}}, {"id": 174, "name": "attributePath", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The path to the attribute containing the text."}, "sources": [{"fileName": "edge.ts", "line": 83, "character": 17}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 175, "name": "clickEventKey", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The key used if the user clicked on the text."}, "sources": [{"fileName": "edge.ts", "line": 85, "character": 17}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 177, "name": "height", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The height used for wrapping multiline text."}, "sources": [{"fileName": "edge.ts", "line": 89, "character": 10}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 186, "name": "ignorePathDirectionForRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the relative rotation is applied as if the path always goes from left to right."}, "sources": [{"fileName": "edge.ts", "line": 50, "character": 34}], "type": {"type": "intrinsic", "name": "boolean"}, "inheritedFrom": {"type": "reference", "id": 169, "name": "PathPositionRotationAndScale.ignorePathDirectionForRotation"}}, {"id": 179, "name": "offsetX", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Offset from the reference point in x direction."}, "sources": [{"fileName": "edge.ts", "line": 93, "character": 11}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 180, "name": "offsetY", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Offset from the reference point in y direction."}, "sources": [{"fileName": "edge.ts", "line": 95, "character": 11}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 178, "name": "padding", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The padding is used to avoid collisions."}, "sources": [{"fileName": "edge.ts", "line": 91, "character": 11}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 182, "name": "positionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The relative position of the path element on the edge (between 0 and 1). (Default `0` == 'start')"}, "sources": [{"fileName": "edge.ts", "line": 35, "character": 18}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "number"}, {"type": "literal", "value": "start"}, {"type": "literal", "value": "end"}]}, "inheritedFrom": {"type": "reference", "id": 165, "name": "PathPositionRotationAndScale.positionOnLine"}}, {"id": 188, "name": "relativeRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Relative rotation angle in degree."}, "sources": [{"fileName": "rotation-vector.ts", "line": 37, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 171, "name": "PathPositionRotationAndScale.relativeRotation"}}, {"id": 184, "name": "scale", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A factor to scale the path element."}, "sources": [{"fileName": "edge.ts", "line": 46, "character": 9}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 167, "name": "PathPositionRotationAndScale.scale"}}, {"id": 185, "name": "scaleRelative", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the scaling factor is applied relative to the stroke width."}, "sources": [{"fileName": "edge.ts", "line": 48, "character": 17}], "type": {"type": "intrinsic", "name": "boolean"}, "inheritedFrom": {"type": "reference", "id": 168, "name": "PathPositionRotationAndScale.scaleRelative"}}, {"id": 181, "name": "template", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The template to use for this text component. (Default: `'default-textcomponent'`)"}, "sources": [{"fileName": "edge.ts", "line": 97, "character": 12}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 173, "name": "value", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The actual text content."}, "sources": [{"fileName": "edge.ts", "line": 81, "character": 9}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 176, "name": "width", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The width used for wrapping the text."}, "sources": [{"fileName": "edge.ts", "line": 87, "character": 9}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [183, 187, 174, 175, 177, 186, 179, 180, 178, 182, 188, 184, 185, 181, 173, 176]}], "sources": [{"fileName": "edge.ts", "line": 79, "character": 30}], "extendedTypes": [{"type": "reference", "id": 164, "name": "PathPositionRotationAndScale"}]}, {"id": 158, "name": "edgeId", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "edge.ts", "line": 217, "character": 22}], "signatures": [{"id": 159, "name": "edgeId", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Return edge id if set or calculate a new id from target and source."}, "parameters": [{"id": 160, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge to get the id from\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 152, "name": "normalizePositionOnLine", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "edge.ts", "line": 57, "character": 39}], "signatures": [{"id": 153, "name": "normalizePositionOnLine", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Normalize the positionOnLine argument to a number. (Default: `0`)"}, "parameters": [{"id": 154, "name": "positionOnLine", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "number"}, {"type": "literal", "value": "start"}, {"type": "literal", "value": "end"}]}}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 155, "name": "setDefaultEdgeDragHandles", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "edge.ts", "line": 121, "character": 41}], "signatures": [{"id": 156, "name": "setDefaultEdgeDragHandles", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Set the `dragHandles` attribute of an edge to the default values.", "text": "See `Edge.dragHandles`.\n"}, "parameters": [{"id": 157, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge to set the default drag handles for\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Interfaces", "kind": 256, "children": [221, 205, 189, 164, 161, 172]}, {"title": "Functions", "kind": 64, "children": [158, 152, 155]}], "sources": [{"fileName": "edge.ts", "line": 1, "character": 0}]}, {"id": 238, "name": "grapheditor", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 239, "name": "EventSource", "kind": 4, "kindString": "Enumeration", "flags": {}, "comment": {"shortText": "An enum describing the source of the event.", "text": "All events that happen because of API interactions will have the API value.\nAll events that were directly triggered by the user will have the USER_INTERACTION value.\n"}, "children": [{"id": 241, "name": "API", "kind": 16, "kindString": "Enumeration member", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 51, "character": 7}], "defaultValue": "\"API\""}, {"id": 240, "name": "INTERNAL", "kind": 16, "kindString": "Enumeration member", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 50, "character": 12}], "defaultValue": "\"INTERNAL\""}, {"id": 242, "name": "USER_INTERACTION", "kind": 16, "kindString": "Enumeration member", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 52, "character": 20}], "defaultValue": "\"USER_INTERACTION\""}], "groups": [{"title": "Enumeration members", "kind": 16, "children": [241, 240, 242]}], "sources": [{"fileName": "grapheditor.ts", "line": 49, "character": 23}]}, {"id": 243, "name": "default", "kind": 128, "kindString": "Class", "flags": {}, "children": [{"id": 246, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 247, "name": "new default", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}, "overwrites": {"type": "reference", "name": "HTMLElement.constructor"}}], "overwrites": {"type": "reference", "name": "HTMLElement.constructor"}}, {"id": 262, "name": "_classes", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 78, "character": 20}], "type": {"type": "array", "elementType": {"type": "intrinsic", "name": "string"}}}, {"id": 265, "name": "_edges", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 81, "character": 18}], "type": {"type": "array", "elementType": {"type": "reference", "id": 205, "name": "Edge"}}}, {"id": 267, "name": "_mode", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 83, "character": 17}], "type": {"type": "intrinsic", "name": "string"}, "defaultValue": "'display'"}, {"id": 264, "name": "_nodes", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 80, "character": 18}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1129, "name": "Node"}}}, {"id": 268, "name": "_zoomMode", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 84, "character": 21}], "type": {"type": "intrinsic", "name": "string"}, "defaultValue": "'both'"}, {"id": 323, "name": "calculateLinkHandlesForEdge", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback to calculate LinkHandle lists used for rendering edges.", "text": "This will NOT affect displayed link handles of nodes!\n\nUse this callback to customize where an edge attaches to a node.\nIf more than one link handle is in the result list the nearest one will be used.\nIf the list is empty or null then the LinkHandles of the template will be used.\n", "tags": [{"tag": "param", "text": "the edge to calculate the link handles for", "param": "edge"}, {"tag": "param", "text": "the current list of link handles for the edge source", "param": "sourceHandles"}, {"tag": "param", "text": "the source node", "param": "source"}, {"tag": "param", "text": "the current list of link handles for the edge target", "param": "targetHandles"}, {"tag": "param", "text": "the current target node (for dragged edges without a target this is a `Point`)", "param": "target"}, {"tag": "returns", "text": "an object containing the (altered) link handle lists\n"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 232, "character": 38}], "type": {"type": "reflection", "declaration": {"id": 324, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 325, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 326, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 205, "name": "Edge"}, {"type": "reference", "id": 221, "name": "DraggedEdge"}]}}, {"id": 327, "name": "sourceHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 328, "name": "source", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 329, "name": "targetHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 330, "name": "target", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 161, "name": "Point"}, {"type": "reference", "id": 1129, "name": "Node"}]}}], "type": {"type": "reflection", "declaration": {"id": 331, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 332, "name": "sourceHandles", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 232, "character": 174}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 333, "name": "targetHandles", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 232, "character": 203}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}], "groups": [{"title": "Properties", "kind": 1024, "children": [332, 333]}]}}}]}}}, {"id": 263, "name": "classesToRemove", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 79, "character": 27}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}, {"id": 259, "name": "contentMaxHeight", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 73, "character": 28}], "type": {"type": "intrinsic", "name": "number"}, "defaultValue": "1"}, {"id": 260, "name": "contentMaxWidth", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 74, "character": 27}], "type": {"type": "intrinsic", "name": "number"}, "defaultValue": "1"}, {"id": 258, "name": "currentZoom", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 71, "character": 23}], "type": {"type": "reference", "name": "ZoomTransform"}}, {"id": 272, "name": "defaultEdgePathGenerator", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 106, "character": 36}], "type": {"type": "reference", "id": 99, "name": "EdgePathGenerator"}}, {"id": 266, "name": "draggedEdges", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 82, "character": 24}], "type": {"type": "array", "elementType": {"type": "reference", "id": 221, "name": "DraggedEdge"}}}, {"id": 270, "name": "dynamicTemplateRegistry", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The dynamic template registry of this graph.", "text": "The dynamic template registry does not get cleared automatically when the other\ntemplates get updated!\n"}, "sources": [{"fileName": "grapheditor.ts", "line": 98, "character": 34}], "type": {"type": "reference", "id": 1397, "name": "DynymicTemplateRegistry"}}, {"id": 271, "name": "edgePathGeneratorRegistry", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The edge path generator registry of this graph.", "text": "The registry does not get cleared automatically when the other\ntemplates get updated!\n"}, "sources": [{"fileName": "grapheditor.ts", "line": 105, "character": 36}], "type": {"type": "reference", "id": 1349, "name": "EdgePathGeneratorRegistry"}}, {"id": 254, "name": "edgesGroup", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 66, "character": 22}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 252, "name": "graph", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 64, "character": 17}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 273, "name": "groupingManager", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 108, "character": 26}], "type": {"type": "reference", "id": 874, "name": "GroupingManager"}}, {"id": 261, "name": "hovered", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 76, "character": 19}], "type": {"type": "reference", "typeArguments": [{"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}], "name": "Set"}, "defaultValue": "..."}, {"id": 275, "name": "interactionStateData", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 115, "character": 32}], "type": {"type": "reflection", "declaration": {"id": 276, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 280, "name": "fromMode", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "sources": [{"fileName": "grapheditor.ts", "line": 119, "character": 16}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 279, "name": "selected", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "sources": [{"fileName": "grapheditor.ts", "line": 118, "character": 16}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}, {"id": 277, "name": "source", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "sources": [{"fileName": "grapheditor.ts", "line": 116, "character": 14}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 278, "name": "target", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "sources": [{"fileName": "grapheditor.ts", "line": 117, "character": 14}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "groups": [{"title": "Properties", "kind": 1024, "children": [280, 279, 277, 278]}], "indexSignature": {"id": 281, "name": "__index", "kind": 8192, "kindString": "Index signature", "flags": {}, "parameters": [{"id": 282, "name": "property", "kind": 32768, "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "any"}}}}, "defaultValue": "null"}, {"id": 253, "name": "nodesGroup", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 65, "character": 22}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 274, "name": "objectCache", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "comment": {"shortText": "The object cache responsible for fast access of nodes and edges."}, "sources": [{"fileName": "grapheditor.ts", "line": 113, "character": 23}], "type": {"type": "reference", "id": 1143, "name": "GraphObjectCache"}}, {"id": 287, "name": "onBeforeCompleteRender", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback before the graph is updated by the `completeRender` method.", "text": "Use this callback to reorder nodeList or edgeList to change which node/edge\ngets drawn above which node/edge. See also `GroupingManager.getGroupDepthOf`.\n", "tags": [{"tag": "param", "text": "The eventSource used for the render event dispatched later by `completeRender`.\n", "param": "eventSource"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 140, "character": 33}], "type": {"type": "reflection", "declaration": {"id": 288, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 289, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 290, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}], "type": {"type": "intrinsic", "name": "void"}}]}}}, {"id": 291, "name": "onBeforeNodeMove", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback before a Node is moved.", "text": "Use this callback to manipulate the provided movement information.\nThe callback must return the modified movement information.\nIf the callback returns null the node movement is cancelled.\n", "tags": [{"tag": "param", "text": "the movement information containing the node that is about to move", "param": "nodeMovementInfo"}, {"tag": "returns", "text": "the modified movement information\n"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 152, "character": 27}], "type": {"type": "reflection", "declaration": {"id": 292, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 293, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 294, "name": "nodeMovementInfo", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1137, "name": "NodeMovementInformation"}}], "type": {"type": "reference", "id": 1137, "name": "NodeMovementInformation"}}]}}}, {"id": 295, "name": "onCreateDraggedEdge", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback when a new dragged edge is created.", "text": "Use this callback only to customize the edge attributes like markers or type!\nThe callback must return the modified edge.\nIf the callback returns null the drag is cancelled.\n", "tags": [{"tag": "param", "text": "the newly created dragged edge", "param": "edge"}, {"tag": "returns", "text": "the modified dragged edge\n"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 164, "character": 30}], "type": {"type": "reflection", "declaration": {"id": 296, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 297, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 298, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}], "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}]}}}, {"id": 299, "name": "onDraggedEdgeTargetChange", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback dragged edge has a new target.", "text": "Only modify the existing edge!\n", "tags": [{"tag": "param", "text": "the dragged edge", "param": "edge"}, {"tag": "param", "text": "the source node of the edge", "param": "sourceNode"}, {"tag": "param", "text": "the target node of the edge (may be `null` if the edge currently has no target)\n", "param": "targetNode"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 175, "character": 36}], "type": {"type": "reflection", "declaration": {"id": 300, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 301, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 302, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}, {"id": 303, "name": "sourceNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 304, "name": "targetNode", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "void"}}]}}}, {"id": 305, "name": "onDropDraggedEdge", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback when a existing dragged edge is dropped.", "text": "Use this callback only to customize the edge attributes like markers or type!\nThe callback must return the modified edge.\nThe returned edge must not be `null`!\n", "tags": [{"tag": "param", "text": "the dragged edge", "param": "edge"}, {"tag": "param", "text": "the source node of the edge", "param": "sourceNode"}, {"tag": "param", "text": "the target node of the edge (is never `null` when dropping the edge on a target)", "param": "targetNode"}, {"tag": "returns", "text": "the updated edge object (must NOT be `null`)\n"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 189, "character": 28}], "type": {"type": "reflection", "declaration": {"id": 306, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 307, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 308, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}, {"id": 309, "name": "sourceNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 310, "name": "targetNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "reference", "id": 205, "name": "Edge"}}]}}}, {"id": 248, "name": "resizeObserver", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 58, "character": 26}], "type": {"type": "intrinsic", "name": "any"}}, {"id": 255, "name": "root", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 68, "character": 16}], "type": {"type": "reference", "name": "ShadowRoot"}}, {"id": 316, "name": "setEdgeClass", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback to set/unset a given class for an edge.", "text": "The callback will be called for each class defined in `classes` for each edge.\n", "tags": [{"tag": "param", "text": "the css class to be set for the edge", "param": "className"}, {"tag": "param", "text": "the edge to set the class for", "param": "edge"}, {"tag": "param", "text": "the source node of the edge", "param": "sourceNode"}, {"tag": "param", "text": "target node of the edge (may be `null` for dragged edges without a target)", "param": "the"}, {"tag": "returns", "text": "`true` iff the class should be set for this edge, false if not\n"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 213, "character": 23}], "type": {"type": "reflection", "declaration": {"id": 317, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 318, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 319, "name": "className", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 320, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 205, "name": "Edge"}, {"type": "reference", "id": 221, "name": "DraggedEdge"}]}}, {"id": 321, "name": "sourceNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 322, "name": "targetNode", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}}}, {"id": 311, "name": "setNodeClass", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "Callback to set/unset a given class for a node.", "text": "The callback will be called for each class defined in `classes` for each node.\n", "tags": [{"tag": "param", "text": "the css class to be set for the node", "param": "className"}, {"tag": "param", "text": "the node to set the class for", "param": "node"}, {"tag": "returns", "text": "`true` iff the class should be set for this node, false if not\n"}]}, "sources": [{"fileName": "grapheditor.ts", "line": 200, "character": 23}], "type": {"type": "reflection", "declaration": {"id": 312, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 313, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 314, "name": "className", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 315, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}}}, {"id": 269, "name": "staticTemplateRegistry", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The static template registry.", "text": "The templates will be automatically loaded when the svg changes or `updateTemplates` gets called.\n"}, "sources": [{"fileName": "grapheditor.ts", "line": 91, "character": 33}], "type": {"type": "reference", "id": 1365, "name": "StaticTemplateRegistry"}}, {"id": 251, "name": "svg", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 63, "character": 15}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGSVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 250, "name": "svgDocument", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 61, "character": 23}], "type": {"type": "intrinsic", "name": "any"}}, {"id": 249, "name": "svgTemplate", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 60, "character": 23}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 256, "name": "zoom", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 69, "character": 16}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "ZoomBehavior"}}, {"id": 257, "name": "zoomActive", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 70, "character": 22}], "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}, {"id": 338, "name": "classes", "kind": 262144, "kindString": "Accessor", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 258, "character": 15}], "getSignature": [{"id": 339, "name": "classes", "kind": 524288, "kindString": "Get signature", "flags": {}, "type": {"type": "array", "elementType": {"type": "intrinsic", "name": "string"}}}], "setSignature": [{"id": 340, "name": "classes", "kind": 1048576, "kindString": "Set signature", "flags": {}, "comment": {"shortText": "The list of css classes used for dynamic css classes together with `setNodeClass` or `setEdgeClass`."}, "parameters": [{"id": 341, "name": "classes", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "array", "elementType": {"type": "intrinsic", "name": "string"}}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 336, "name": "currentViewWindow", "kind": 262144, "kindString": "Accessor", "flags": {}, "comment": {"shortText": "The currently visible area in graph coordinates."}, "sources": [{"fileName": "grapheditor.ts", "line": 245, "character": 25}], "getSignature": [{"id": 337, "name": "currentViewWindow", "kind": 524288, "kindString": "Get signature", "flags": {}, "comment": {"shortText": "The currently visible area in graph coordinates."}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}]}, {"id": 334, "name": "currentZoomTransform", "kind": 262144, "kindString": "Accessor", "flags": {}, "comment": {"shortText": "The current zoom transform of the zoom group in the svg."}, "sources": [{"fileName": "grapheditor.ts", "line": 238, "character": 28}], "getSignature": [{"id": 335, "name": "currentZoomTransform", "kind": 524288, "kindString": "Get signature", "flags": {}, "comment": {"shortText": "The current zoom transform of the zoom group in the svg."}, "type": {"type": "reference", "name": "ZoomTransform"}}]}, {"id": 346, "name": "edgeList", "kind": 262144, "kindString": "Accessor", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 320, "character": 16}], "getSignature": [{"id": 347, "name": "edgeList", "kind": 524288, "kindString": "Get signature", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 205, "name": "Edge"}}}], "setSignature": [{"id": 348, "name": "edgeList", "kind": 1048576, "kindString": "Set signature", "flags": {}, "comment": {"shortText": "The list of edges.", "text": "This list should **not** be altered without updating the cache!\nUse `addEdge` and `removeEdge` to keep the cache consistent.\n"}, "parameters": [{"id": 349, "name": "edges", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 205, "name": "Edge"}}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 283, "name": "initialized", "kind": 262144, "kindString": "Accessor", "flags": {"isPrivate": true}, "comment": {"shortText": "Private property to determine if the graph can be drawn."}, "sources": [{"fileName": "grapheditor.ts", "line": 124, "character": 27}], "getSignature": [{"id": 284, "name": "initialized", "kind": 524288, "kindString": "Get signature", "flags": {}, "comment": {"shortText": "Private property to determine if the graph can be drawn."}, "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 285, "name": "isInteractive", "kind": 262144, "kindString": "Accessor", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 128, "character": 29}], "getSignature": [{"id": 286, "name": "isInteractive", "kind": 524288, "kindString": "Get signature", "flags": {}, "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 352, "name": "mode", "kind": 262144, "kindString": "Accessor", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 370, "character": 12}], "getSignature": [{"id": 353, "name": "mode", "kind": 524288, "kindString": "Get signature", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "setSignature": [{"id": 354, "name": "mode", "kind": 1048576, "kindString": "Set signature", "flags": {}, "comment": {"shortText": "The interaction mode of the grapheditor."}, "parameters": [{"id": 355, "name": "mode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 342, "name": "nodeList", "kind": 262144, "kindString": "Accessor", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 275, "character": 16}], "getSignature": [{"id": 343, "name": "nodeList", "kind": 524288, "kindString": "Get signature", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1129, "name": "Node"}}}], "setSignature": [{"id": 344, "name": "nodeList", "kind": 1048576, "kindString": "Set signature", "flags": {}, "comment": {"shortText": "The list of nodes.", "text": "This list should **not** be altered outside without updating the cache!\nUse `addNode` and `removeNode` to keep the cache consistent.\n\nChanging this list directly may lead to **inconsistencies** as there may\nstill be **edges pointing to already** removed nodes!\n"}, "parameters": [{"id": 345, "name": "nodes", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1129, "name": "Node"}}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 350, "name": "selected", "kind": 262144, "kindString": "Accessor", "flags": {}, "comment": {"shortText": "The currently selected nodes."}, "sources": [{"fileName": "grapheditor.ts", "line": 365, "character": 16}], "getSignature": [{"id": 351, "name": "selected", "kind": 524288, "kindString": "Get signature", "flags": {}, "comment": {"shortText": "The currently selected nodes."}, "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}]}, {"id": 356, "name": "zoomMode", "kind": 262144, "kindString": "Accessor", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 382, "character": 16}], "getSignature": [{"id": 357, "name": "zoomMode", "kind": 524288, "kindString": "Get signature", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "setSignature": [{"id": 358, "name": "zoomMode", "kind": 1048576, "kindString": "Set signature", "flags": {}, "comment": {"shortText": "The zoom mode of the grapheditor."}, "parameters": [{"id": 359, "name": "mode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 244, "name": "observedAttributes", "kind": 262144, "kindString": "Accessor", "flags": {"isStatic": true}, "comment": {"shortText": "Get all observed attributes of this webcomponent."}, "sources": [{"fileName": "grapheditor.ts", "line": 453, "character": 33}], "getSignature": [{"id": 245, "name": "observedAttributes", "kind": 524288, "kindString": "Get signature", "flags": {}, "comment": {"shortText": "Get all observed attributes of this webcomponent."}, "type": {"type": "array", "elementType": {"type": "intrinsic", "name": "string"}}}]}, {"id": 473, "name": "_moveNode", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1511, "character": 21}], "signatures": [{"id": 474, "name": "_moveNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Move a node to the desired point (x,y).", "text": "If the node has a fixed position dictated by its group it will not be moved from that position!\nIf the nodeMovementInfo contains children every child will be moved the same offset as the node.\nGroup dictated positions are not checked for these children!\n"}, "parameters": [{"id": 475, "name": "nodeMovementInfo", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the movement info for this node move operation"}, "type": {"type": "reference", "id": 1137, "name": "NodeMovementInformation"}}, {"id": 476, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target x coordinate"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 477, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target y coordinate"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 478, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source used in movement events\n"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 448, "name": "addDefaultTemplates", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1122, "character": 30}], "signatures": [{"id": 449, "name": "addDefaultTemplates", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add missing default templates to the `defs` tag.", "text": "This method will be automatically called if the svg changes.\nIf templates are changed call this method and make a `completeRender(true)`\nto render the graph with the new templates.\n"}, "parameters": [{"id": 450, "name": "svg", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the svg to update\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGSVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 404, "name": "addEdge", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 717, "character": 18}], "signatures": [{"id": 405, "name": "addEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a single edge to the graph."}, "parameters": [{"id": 406, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge to add"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 407, "name": "redraw", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if graph should be redrawn (default: `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 371, "name": "addNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 518, "character": 18}], "signatures": [{"id": 372, "name": "addNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a single node to the graph."}, "parameters": [{"id": 373, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "node to add"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 374, "name": "redraw", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if graph should be redrawn (default: `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 362, "name": "attributeChangedCallback", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 464, "character": 28}], "signatures": [{"id": 363, "name": "attributeChangedCallback", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback when an attribute changed in html dom."}, "parameters": [{"id": 364, "name": "name", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "name of the attribute that changed"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 365, "name": "oldValue", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "old value"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 366, "name": "newValue", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "new value\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 601, "name": "calculateAbsolutePositionOnLine", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2720, "character": 42}], "signatures": [{"id": 602, "name": "calculateAbsolutePositionOnLine", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the safe absolutePositionOnLine value for the given path length.", "text": "If absolutePositidragHandlesonOnLine is negative it is counted from the end of the path.\nIf absolutePositidragHandlesonOnLine exceeds the path length positionOnLine will be used as fallback.\n", "returns": "the positive absolute positionOnLine to be used with `path.getPointAtLength(absolutePositionOnLine)`.\n"}, "parameters": [{"id": 603, "name": "pathLength", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the length of the path"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 604, "name": "positionOnLine", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the relative position on the line (between 0 and 1)"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 605, "name": "absolutePositionOnLine", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "intrinsic", "name": "number"}}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 576, "name": "calculateLineAttachementVector", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2438, "character": 42}], "signatures": [{"id": 577, "name": "calculateLineAttachementVector", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the attachement vector for a marker."}, "parameters": [{"id": 578, "name": "startingAngle", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the line angle for the marker"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "number"}, {"type": "reference", "id": 1342, "name": "RotationVector"}]}}, {"id": 579, "name": "markerSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 580, "name": "strokeWidth", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the current stroke width\n"}, "type": {"type": "intrinsic", "name": "number"}}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}]}, {"id": 606, "name": "calculatePathNormalAtPosition", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2747, "character": 40}], "signatures": [{"id": 607, "name": "calculatePathNormalAtPosition", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate a normal vector pointing in the direction of the path at the positonOnLine."}, "parameters": [{"id": 608, "name": "path", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the path object"}, "type": {"type": "reference", "name": "SVGPathElement"}}, {"id": 609, "name": "absolutePositionOnLine", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the absolute position on the path (between 0 and length)"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 610, "name": "point", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the point at positionOnLine (will be calculated if not supplied)"}, "type": {"type": "reference", "name": "DOMPoint"}}, {"id": 611, "name": "length", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the length of the path (will be calculated if not supplied)\n"}, "type": {"type": "intrinsic", "name": "number"}}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}]}, {"id": 612, "name": "calculatePathObjectTransformation", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2773, "character": 45}], "signatures": [{"id": 613, "name": "calculatePathObjectTransformation", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the transformation attribute for a path object placed on an edge."}, "parameters": [{"id": 614, "name": "point", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the path object position position"}, "type": {"type": "reflection", "declaration": {"id": 615, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 616, "name": "x", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 2773, "character": 56}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 617, "name": "y", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 2773, "character": 67}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [616, 617]}]}}}, {"id": 618, "name": "pathObject", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the path object to place"}, "type": {"type": "reference", "id": 164, "name": "PathPositionRotationAndScale"}}, {"id": 619, "name": "strokeWidth", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the stroke width of the edge"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 620, "name": "normal", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the normal vector of the edge at the path object position\n"}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 621, "name": "calculateRotationTransformationAngle", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2798, "character": 48}], "signatures": [{"id": 622, "name": "calculateRotationTransformationAngle", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the rotation vector from rotation data and a normal vector."}, "parameters": [{"id": 623, "name": "rotationData", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the rotation data object"}, "type": {"type": "reference", "id": 1345, "name": "RotationData"}}, {"id": 624, "name": "normal", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the normal vector used for relative rotation"}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}, {"id": 625, "name": "ignorePathDirectionForRotation", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "iff true the normal rotation is limited to half a circle (useful for text components)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 396, "name": "changeSelected", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 675, "character": 25}], "signatures": [{"id": 397, "name": "changeSelected", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Completely replace the current node selection.", "text": "Use an empty set or `null` to clear the current selection.\n\nThis method will cause a 'selection' event if the selection has changed.\nThis method does not check if the node id's in the set exist.\n"}, "parameters": [{"id": 398, "name": "selected", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new set of selected node id's"}, "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}, {"id": 399, "name": "updateHighlights", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "set this to true to update highlights immediately (default `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 451, "name": "completeRender", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1154, "character": 25}], "signatures": [{"id": 452, "name": "completeRender", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Render all changes of the data to the graph."}, "parameters": [{"id": 453, "name": "forceUpdateTemplates", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "set to true if a template was changed,\n     forces an entire re render by deleting all nodes and edges before adding them again"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}, {"id": 454, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source used for render events (default: `EventSource.API`)\n"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 360, "name": "connectedCallback", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grapheditor.ts", "line": 431, "character": 21}], "signatures": [{"id": 361, "name": "connectedCallback", "kind": 4096, "kindString": "Call signature", "flags": {}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 656, "name": "createDraggedEdge", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3168, "character": 29}], "signatures": [{"id": 657, "name": "createDraggedEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create a new dragged edge from a source node."}, "parameters": [{"id": 658, "name": "sourceNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "node that edge was dragged from\n"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}]}, {"id": 659, "name": "createDraggedEdgeFromExistingEdge", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3197, "character": 45}], "signatures": [{"id": 660, "name": "createDraggedEdgeFromExistingEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create a dragged edge from an existing edge."}, "parameters": [{"id": 661, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "existing edge"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 662, "name": "reverseEdgeDirection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "reverse the direction of the returned edge\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}]}, {"id": 392, "name": "deselectNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 647, "character": 23}], "signatures": [{"id": 393, "name": "deselectNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove a node from the selected set.", "text": "This method will cause a 'selection' event if the selection has changed.\nThis method does not check if the nodeId exists.\n\nTo update the graph the `updateHighlights` method is used iff `updateHighlights` is `true`.\n"}, "parameters": [{"id": 394, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to deselect"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 395, "name": "updateHighlights", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "set this to true to update highlights immediately (default `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 667, "name": "dropDraggedEdge", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3357, "character": 27}], "signatures": [{"id": 668, "name": "dropDraggedEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Drop dragged edge."}, "parameters": [{"id": 669, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge that was dropped"}, "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}, {"id": 670, "name": "isReversedEdge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "true if the edge is bidirectional and was dragged\n     from a reverse handle flipping the edge direction\n"}, "type": {"type": "intrinsic", "name": "boolean"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 479, "name": "getClientPointFromGraphCoordinates", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1571, "character": 45}], "signatures": [{"id": 480, "name": "getClientPointFromGraphCoordinates", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Convert from graph coordinates to screen coordinates.", "text": "This method can be useful together with getNodesFromPoint.\n\nMost events already contain screen/client coordinates!\nOnly use this method if no scren/client coordinates are available.\n", "returns": "the same point in screen/client coordinates\n"}, "parameters": [{"id": 481, "name": "graphPoint", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a point in graph coordinates"}, "type": {"type": "reference", "id": 161, "name": "Point"}}], "type": {"type": "reference", "id": 161, "name": "Point"}}]}, {"id": 528, "name": "getDraggedEdgeSelection", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1855, "character": 34}], "signatures": [{"id": 529, "name": "getDraggedEdgeSelection", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the dragged edge selection with bound data."}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 221, "name": "DraggedEdge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}]}, {"id": 408, "name": "getEdge", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 733, "character": 18}], "signatures": [{"id": 409, "name": "getEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the edge with the given id."}, "parameters": [{"id": 410, "name": "edgeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the edge (use the `edgeId` function to compute the id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "id": 205, "name": "Edge"}}]}, {"id": 526, "name": "getEdgeSelection", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1846, "character": 27}], "signatures": [{"id": 527, "name": "getEdgeSelection", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the edge selection with bound data."}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}]}, {"id": 415, "name": "getEdgesBySource", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 770, "character": 27}], "signatures": [{"id": 416, "name": "getEdgesBySource", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get all edges that have the given nodeId as source."}, "parameters": [{"id": 417, "name": "sourceNodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id of the edge source\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "id": 205, "name": "Edge"}], "name": "Set"}}]}, {"id": 418, "name": "getEdgesByTarget", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 779, "character": 27}], "signatures": [{"id": 419, "name": "getEdgesByTarget", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get all edges that have the given nodeId as target."}, "parameters": [{"id": 420, "name": "targetNodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id of the edge target\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "id": 205, "name": "Edge"}], "name": "Set"}}]}, {"id": 522, "name": "getEdgesGroup", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1830, "character": 24}], "signatures": [{"id": 523, "name": "getEdgesGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the d3 selection of the SVG g element containing all edge groups."}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}]}, {"id": 518, "name": "getGraphGroup", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1816, "character": 24}], "signatures": [{"id": 519, "name": "getGraphGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the d3 selection of the SVG g element containing the graph."}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}]}, {"id": 482, "name": "getGraphPointFromClientCoordinates", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1587, "character": 45}], "signatures": [{"id": 483, "name": "getGraphPointFromClientCoordinates", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Convert from screen coordinates to graph coordinates.", "text": "Inverse operation of `getClientPointFromGraphCoordinates`.\n", "returns": "the same point in graph coordinates\n"}, "parameters": [{"id": 484, "name": "clientPoint", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 161, "name": "Point"}}], "type": {"type": "reference", "id": 161, "name": "Point"}}]}, {"id": 470, "name": "getGroupDictatedPositionOfNode", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1457, "character": 42}], "signatures": [{"id": 471, "name": "getGroupDictatedPositionOfNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the position the group dictates for this node.", "text": "If the node is not in a group or has no fixed position in that group this method returns null.\n", "returns": "the absolute node position (or null)\n"}, "parameters": [{"id": 472, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node to get the position for"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "reference", "id": 161, "name": "Point"}}]}, {"id": 375, "name": "getNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 533, "character": 18}], "signatures": [{"id": 376, "name": "getNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the node with the given id."}, "parameters": [{"id": 377, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "id": 1129, "name": "Node"}}]}, {"id": 385, "name": "getNodeBBox", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 606, "character": 22}], "signatures": [{"id": 386, "name": "getNodeBBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the bounding box of a node.", "text": "The box is relative to the node. Add `node.x` and `node.y` to the `x` and `y`\ncoordinates of the box to get a box at the correct coordinates.\n\nThe bounding box is only available/updated after the node was rendered to the graph!\n\nThe bounding box includes **all** displayed elements in the node group.\nThis especially includes the link handles not hidden with `disply: none`!\n\nDo **not** change the returned object directly!\n"}, "parameters": [{"id": 387, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node to get the bounding box of\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}, {"type": "reference", "id": 1129, "name": "Node"}]}}], "type": {"type": "reference", "id": 1468, "name": "Rect"}}]}, {"id": 382, "name": "getNodeDropZonesForNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 586, "character": 34}], "signatures": [{"id": 383, "name": "getNodeDropZonesForNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get all declared NodeDropZones of a node."}, "parameters": [{"id": 384, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node to get the drop zones of\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}, {"type": "reference", "id": 1129, "name": "Node"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 11, "name": "NodeDropZone"}], "name": "Map"}}]}, {"id": 459, "name": "getNodeMovementInformation", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1352, "character": 38}], "signatures": [{"id": 460, "name": "getNodeMovementInformation", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the movement information for moving a Node.", "text": "The calculated movement information contains the actual node to move, the start offset and all affected nodes.\nThe actual node to move may be a (indirect) parent of the given node.\nIf the group that captured the movement of the given node has no node a dummy node is used instead to track the movement.\n\nThis method calls onBeforeNodeMove with the node movement information.\n"}, "parameters": [{"id": 461, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the original node that is to be moved"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 462, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the x coordinate from where the move should start (can be substituted by node.x)"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 463, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the y coordinate from where the move should start (can be substituted by node.y)\n"}, "type": {"type": "intrinsic", "name": "number"}}], "type": {"type": "reference", "id": 1137, "name": "NodeMovementInformation"}}]}, {"id": 524, "name": "getNodeSelection", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1837, "character": 27}], "signatures": [{"id": 525, "name": "getNodeSelection", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the node selection with bound data."}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}]}, {"id": 455, "name": "getNodesFromPoint", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1305, "character": 28}], "signatures": [{"id": 456, "name": "getNodesFromPoint", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get all nodes that are under the given screen/client coordinates.", "text": "Use `getClientPointFromGraphCoordinates` to convert from graph coordinates\nto client coordinates.\n"}, "parameters": [{"id": 457, "name": "clientX", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the x coordinate in the client coordinate system"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 458, "name": "clientY", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the y coordinate in the client coordinate system\n"}, "type": {"type": "intrinsic", "name": "number"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1129, "name": "Node"}}}]}, {"id": 520, "name": "getNodesGroup", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1823, "character": 24}], "signatures": [{"id": 521, "name": "getNodesGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the d3 selection of the SVG g element containing all node groups."}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}]}, {"id": 516, "name": "getSVG", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1809, "character": 17}], "signatures": [{"id": 517, "name": "getSVG", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the d3 selection of the current SVG used by this grapheditor."}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGSVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}]}, {"id": 530, "name": "getSingleNodeSelection", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1866, "character": 34}], "signatures": [{"id": 531, "name": "getSingleNodeSelection", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get a single node selection with bound datum."}, "parameters": [{"id": 532, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to select\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}]}, {"id": 431, "name": "graphSlotChanged", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 930, "character": 28}], "signatures": [{"id": 432, "name": "graphSlotChanged", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Determine the svg element to be used to render the graph."}, "parameters": [{"id": 433, "name": "slot", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the slot that changed\n"}, "type": {"type": "reference", "name": "HTMLSlotElement"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 434, "name": "initialize", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 962, "character": 21}], "signatures": [{"id": 435, "name": "initialize", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Initialize the provided svg.", "text": "Setup group for zooming and groups for nodes and edges.\nAdd a missing `defs` tag.\n"}, "parameters": [{"id": 436, "name": "svg", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "name": "SVGSVGElement"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 429, "name": "loadSvgFromTemplate", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 908, "character": 31}], "signatures": [{"id": 430, "name": "loadSvgFromTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Load the svg for the grapheditor from an svg template.", "text": "The html template containing the svg is found with `this.svgTemplate`\nthat can be set with an attribute on the network-graph tag.\n\nIf `this.svgTemplate` is not set this method does nothing.\n"}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 464, "name": "moveNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1404, "character": 19}], "signatures": [{"id": 465, "name": "moveNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Move a node to the coordinates (x,y).", "text": "This method handles cases where a group captures the movement of a child node correctly.\nThis method also handles all group-join and -leave mechanics like for dragging nodes manually.\n\nFor batch updates updatePositions is set to false.\nBe aware that nodeDropPositions are only updated if the graph is rerendered!\nThis is only relevant for adding/removing dropZones or chainging their filters.\n\nIf this method returns true a complete render might be neccessary to correctly display all changes!\n", "returns": "true iff the graph possibly needs a complete render to correctly display all changes\n"}, "parameters": [{"id": 466, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node to move"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 467, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target x coordinate of the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 468, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target y coordinate of the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 469, "name": "updatePositions", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "set this to true to automatically render all position changes (default: false)"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 736, "name": "onBackgroundClick", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3856, "character": 29}], "signatures": [{"id": 737, "name": "onBackgroundClick", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create and dispatch a 'backgroundclick' event."}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 685, "name": "onEdgeClick", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3482, "character": 23}], "signatures": [{"id": 686, "name": "onEdgeClick", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback on edges for click event."}, "parameters": [{"id": 687, "name": "edgeDatum", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "Corresponding datum of edge\n"}, "type": {"type": "intrinsic", "name": "any"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 671, "name": "onEdgeCreate", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3414, "character": 24}], "signatures": [{"id": 672, "name": "onEdgeCreate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback for creating edgeadd events.", "returns": "false if event was cancelled\n"}, "parameters": [{"id": 673, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the created edge"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 674, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 675, "name": "cancelable", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "set to true if the event can be cancelled (default `true`)"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "true"}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 676, "name": "onEdgeDrop", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3437, "character": 22}], "signatures": [{"id": 677, "name": "onEdgeDrop", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback for creating edgedrop events.", "text": "The event is only for dragged edges that are dropped in the void.\n", "returns": "false if event was cancelled\n"}, "parameters": [{"id": 678, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the dropped dragged edge"}, "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}, {"id": 679, "name": "dropPosition", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the position where the edge was dropped at"}, "type": {"type": "reference", "id": 161, "name": "Point"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 680, "name": "onEdgeRemove", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3464, "character": 24}], "signatures": [{"id": 681, "name": "onEdgeRemove", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback for creating edgeremove events.", "returns": "false if event was cancelled\n"}, "parameters": [{"id": 682, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the created edge"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 683, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 684, "name": "cancelable", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "set to true if the event can be cancelled (default `true`)"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "true"}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 688, "name": "onEdgeTextDrag", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3520, "character": 26}], "signatures": [{"id": 689, "name": "onEdgeTextDrag", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create and dispatch 'edgetextdragstart' and 'edgetextdragend' events."}, "parameters": [{"id": 690, "name": "eventType", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the type of the event"}, "type": {"type": "union", "types": [{"type": "literal", "value": "start"}, {"type": "literal", "value": "end"}]}}, {"id": 691, "name": "textComponent", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "The text component that was dragged."}, "type": {"type": "reference", "id": 172, "name": "TextComponent"}}, {"id": 692, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "The edge the text component belongs to."}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 693, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source\n"}, "type": {"type": "intrinsic", "name": "any"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 694, "name": "onEdgeTextPositionChange", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3540, "character": 36}], "signatures": [{"id": 695, "name": "onEdgeTextPositionChange", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback for creating edgetextpositionchange events."}, "parameters": [{"id": 696, "name": "textComponent", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "The text component that was dragged."}, "type": {"type": "reference", "id": 172, "name": "TextComponent"}}, {"id": 697, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "The edge the text component belongs to.\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 748, "name": "onInitializedSVG", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3927, "character": 28}], "signatures": [{"id": 749, "name": "onInitializedSVG", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create and dispatch a 'svginitialized' event."}, "parameters": [{"id": 750, "name": "oldSVG", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the old svg if any\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGSVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 721, "name": "onNodeClick", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3686, "character": 23}], "signatures": [{"id": 722, "name": "onNodeClick", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback on nodes for click event."}, "parameters": [{"id": 723, "name": "nodeDatum", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "Corresponding datum of node\n"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 698, "name": "onNodeCreate", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3560, "character": 24}], "signatures": [{"id": 699, "name": "onNodeCreate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback for creating nodeadd events.", "returns": "false if event was cancelled\n"}, "parameters": [{"id": 700, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the created node"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 701, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 706, "name": "onNodeDrag", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3599, "character": 22}], "signatures": [{"id": 707, "name": "onNodeDrag", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create and dispatch 'nodedragstart' and 'nodedragend' events."}, "parameters": [{"id": 708, "name": "eventType", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the type of the event"}, "type": {"type": "union", "types": [{"type": "literal", "value": "start"}, {"type": "literal", "value": "end"}]}}, {"id": 709, "name": "movementInfo", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node movement information"}, "type": {"type": "reference", "id": 1137, "name": "NodeMovementInformation"}}, {"id": 710, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source\n"}, "type": {"type": "intrinsic", "name": "any"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 715, "name": "onNodeEnter", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3637, "character": 23}], "signatures": [{"id": 716, "name": "onNodeEnter", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback on nodes for mouseEnter event."}, "parameters": [{"id": 717, "name": "nodeDatum", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "Corresponding datum of node\n"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 718, "name": "onNodeLeave", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3661, "character": 23}], "signatures": [{"id": 719, "name": "onNodeLeave", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback on nodes for mouseLeave event."}, "parameters": [{"id": 720, "name": "nodeDatum", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "Corresponding datum of node\n"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 711, "name": "onNodePositionChange", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3619, "character": 32}], "signatures": [{"id": 712, "name": "onNodePositionChange", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback for creating nodepositionchange events."}, "parameters": [{"id": 713, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 714, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source of the selection event (default: EventSource.USER_INTERACTION)\n"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 702, "name": "onNodeRemove", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3579, "character": 24}], "signatures": [{"id": 703, "name": "onNodeRemove", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Callback for creating noderemove events.", "returns": "false if event was cancelled\n"}, "parameters": [{"id": 704, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the created node"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 705, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 727, "name": "onNodeSelectLink", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3762, "character": 28}], "signatures": [{"id": 728, "name": "onNodeSelectLink", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Selection logik in 'link' mode."}, "parameters": [{"id": 729, "name": "nodeDatum", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "Corresponding datum of node\n"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 738, "name": "onRender", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3883, "character": 20}], "signatures": [{"id": 739, "name": "onRender", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create and dispatch a 'render' event."}, "parameters": [{"id": 740, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to use for the event"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 741, "name": "type", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "what type of render was performed"}, "type": {"type": "union", "types": [{"type": "literal", "value": "complete"}, {"type": "literal", "value": "text"}, {"type": "literal", "value": "classes"}, {"type": "literal", "value": "positions"}]}}, {"id": 742, "name": "affectedNodes", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the nodes that got updated by this render (only for partial renders)\n"}, "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 724, "name": "onSelectionChangeInternal", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3741, "character": 37}], "signatures": [{"id": 725, "name": "onSelectionChangeInternal", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Internal selection changed callback.", "text": "Create new 'selection' event.\n"}, "parameters": [{"id": 726, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source of the selection event (default: EventSource.USER_INTERACTION)\n"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 743, "name": "onZoomChange", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3907, "character": 24}], "signatures": [{"id": 744, "name": "onZoomChange", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Create and dispatch a 'zoomchange' event."}, "parameters": [{"id": 745, "name": "oldZoom", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the old ZoomTransform"}, "type": {"type": "reference", "name": "ZoomTransform"}}, {"id": 746, "name": "newZoom", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new ZoomTransform"}, "type": {"type": "reference", "name": "ZoomTransform"}}, {"id": 747, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to use for the event\n"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 546, "name": "recursiveAttributeGet", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2094, "character": 32}], "signatures": [{"id": 547, "name": "recursiveAttributeGet", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Recursively retrieve an attribute.", "text": "The attribute path is a string split at the '.' character.\nThe attribute path is processed recursively by applying `obj = obj[attr[0]]`.\nIf a path segment is '()' then `obj = obj()` is applied instead.\n"}, "parameters": [{"id": 548, "name": "obj", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the object to get the attribute from"}, "type": {"type": "intrinsic", "name": "unknown"}}, {"id": 549, "name": "attr", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the attribute or attribute path to get\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "unknown"}}]}, {"id": 427, "name": "reloadSvgTemplate", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 896, "character": 28}], "signatures": [{"id": 428, "name": "reloadSvgTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Reload the svg template.", "text": "Use this method to manually load the svg template if the template\nis defined later in the dom than the grapheditor.\n"}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 411, "name": "removeEdge", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 743, "character": 21}], "signatures": [{"id": 412, "name": "removeEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove a single edge from the graph."}, "parameters": [{"id": 413, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge to remove"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}, {"type": "reference", "id": 205, "name": "Edge"}]}}, {"id": 414, "name": "redraw", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if the graph should be redrawn (default: `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 378, "name": "removeNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 546, "character": 21}], "signatures": [{"id": 379, "name": "removeNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove a single node from the graph.", "text": "This method removes all edges connected to this node from the graph.\nThis method deselects the node before removing it.\n"}, "parameters": [{"id": 380, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "node or id to remove"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}, {"type": "reference", "id": 1129, "name": "Node"}]}}, {"id": 381, "name": "redraw", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if the graph should be redrawn (default: `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 388, "name": "selectNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 622, "character": 21}], "signatures": [{"id": 389, "name": "selectNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a node to the selected set.", "text": "This method will cause a 'selection' event if the selection has changed.\nThis method does not check if the nodeId exists.\n\nTo update the graph the `updateHighlights` method is used iff `updateHighlights` is `true`.\n"}, "parameters": [{"id": 390, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to select"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 391, "name": "updateHighlights", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "set this to true to update highlights immediately (default `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 400, "name": "setEdges", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 703, "character": 19}], "signatures": [{"id": 401, "name": "setEdges", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Set edges and redraw graph.", "text": "The edge list should **not** be updated outside the graph without calling `setEdges` again!\nUse `addEdge` and `removeEdge` to update the list instead.\n"}, "parameters": [{"id": 402, "name": "edges", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "new edgeList"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 205, "name": "Edge"}}}, {"id": 403, "name": "redraw", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if the graph should be redrawn (default: `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 421, "name": "setMode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 789, "character": 18}], "signatures": [{"id": 422, "name": "setMode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Set the graph interaction mode and cleanup temp data from old interaction mode."}, "parameters": [{"id": 423, "name": "mode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "interaction mode (one of [\"display\", \"layout\", \"link\", \"select\"])\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 367, "name": "setNodes", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 504, "character": 19}], "signatures": [{"id": 368, "name": "setNodes", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Set nodes and redraw graph.", "text": "The node list should **not** be updated outside the graph without calling `setNodes` again!\nUse `addNode` and `removeNode` to update the list instead.\n"}, "parameters": [{"id": 369, "name": "nodes", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "new nodeList"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1129, "name": "Node"}}}, {"id": 370, "name": "redraw", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if graph should be redrawn (default: `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 424, "name": "setZoomMode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 848, "character": 22}], "signatures": [{"id": 425, "name": "setZoomMode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Set the graph zoom mode."}, "parameters": [{"id": 426, "name": "mode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "zoom mode (one of [\"none\", \"manual\", \"automatic\", \"both\"])\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 643, "name": "transformBBox", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2938, "character": 24}], "signatures": [{"id": 644, "name": "transformBBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Apply a transformation to a bbox."}, "parameters": [{"id": 645, "name": "bbox", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the bbox to transform"}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 646, "name": "transformation", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the transformation matrix\n"}, "type": {"type": "reference", "name": "DOMMatrix"}}], "type": {"type": "reference", "id": 1468, "name": "Rect"}}]}, {"id": 492, "name": "tryJoinNodeIntoGroup", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1657, "character": 32}], "signatures": [{"id": 493, "name": "tryJoinNodeIntoGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Try for the given node to join a group if it moves to the point (x, y).", "text": "This method checks if the node can join a group when it moves to the given coordinates.\nIf the node can join a group it is added to the group.\n\nThe node will join in the same tree as the group it joined.\nIf the group it joined was not part of a tree it is marked as a tree root.\nIf the joining node was a tree root it will no longer be a tree root as it is joined to the parent tree.\n"}, "parameters": [{"id": 494, "name": "nodeMovementInformation", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the movement information of the node to move"}, "type": {"type": "reference", "id": 1137, "name": "NodeMovementInformation"}}, {"id": 495, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target x coordinates for the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 496, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target y coordinates for the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 497, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used in triggered events"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 498, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event (may be null)\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 485, "name": "tryToLeaveCurrentGroup", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1606, "character": 34}], "signatures": [{"id": 486, "name": "tryToLeaveCurrentGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Try for the given node to leave its group if it moves to the point (x, y).", "text": "This method checks if the node can leave its group when it moves to the given coordinates.\nIf the node can leave the group then the node is removed from the group.\n"}, "parameters": [{"id": 487, "name": "nodeMovementInformation", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the movement information of the node to move"}, "type": {"type": "reference", "id": 1137, "name": "NodeMovementInformation"}}, {"id": 488, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target x coordinates for the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 489, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target y coordinates for the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 490, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used in triggered events"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 491, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event (may be null)\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 502, "name": "updateContentTemplate", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1719, "character": 33}], "signatures": [{"id": 503, "name": "updateContentTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update the content template of a `SVGGElement` to the new template id.", "text": "If the `SVGGElement` already uses the template the content is not touched.\n"}, "typeParameter": [{"id": 504, "name": "T", "kind": 131072, "kindString": "Type parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 172, "name": "TextComponent"}]}}], "parameters": [{"id": 505, "name": "element", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the lement to update the content"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "name": "T"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 506, "name": "templateId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new template ID"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 507, "name": "templateType", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template type to use"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 508, "name": "dynamic", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "`true` iff the template is a dynamic template (default: `false`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}, {"id": 509, "name": "parent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 205, "name": "Edge"}]}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 663, "name": "updateDraggedEdge", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3279, "character": 29}], "signatures": [{"id": 664, "name": "updateDraggedEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update dragged edge on drag event."}, "parameters": [{"id": 665, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 221, "name": "DraggedEdge"}}, {"id": 666, "name": "capturingGroup", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 559, "name": "updateDraggedEdgeGroups", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2190, "character": 35}], "signatures": [{"id": 560, "name": "updateDraggedEdgeGroups", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update draggededge groups."}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 543, "name": "updateDynamicProperties", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2059, "character": 35}], "signatures": [{"id": 544, "name": "updateDynamicProperties", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update non text elements of existing nodes or edges."}, "parameters": [{"id": 545, "name": "groupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of nodes or edges to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 205, "name": "Edge"}]}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 567, "name": "updateEdgeGroup", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2277, "character": 27}], "signatures": [{"id": 568, "name": "updateEdgeGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update markers and path attributes."}, "parameters": [{"id": 569, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of single edge group"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 570, "name": "d", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge datum\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 561, "name": "updateEdgeGroupClasses", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2215, "character": 33}], "signatures": [{"id": 562, "name": "updateEdgeGroupClasses", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update classes of edgeGroups"}, "parameters": [{"id": 563, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "d3 selection of edges to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 556, "name": "updateEdgeGroups", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2171, "character": 28}], "signatures": [{"id": 557, "name": "updateEdgeGroups", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update edge groups."}, "parameters": [{"id": 558, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of edgeGroups\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 733, "name": "updateEdgeHighligts", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3831, "character": 31}], "signatures": [{"id": 734, "name": "updateEdgeHighligts", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate highlighted edges and update their classes."}, "parameters": [{"id": 735, "name": "edgeSelection", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 581, "name": "updateEdgeLinkHandles", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2477, "character": 33}], "signatures": [{"id": 582, "name": "updateEdgeLinkHandles", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the link handles for each edge and store them into the edge."}, "parameters": [{"id": 583, "name": "edgeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of edges to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGPathElement"}, {"type": "union", "types": [{"type": "reference", "id": 205, "name": "Edge"}, {"type": "reference", "id": 221, "name": "DraggedEdge"}]}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 584, "name": "updateEdgePath", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2528, "character": 26}], "signatures": [{"id": 585, "name": "updateEdgePath", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update existing edge path."}, "parameters": [{"id": 586, "name": "edgeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of edges to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGPathElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 564, "name": "updateEdgePositions", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2250, "character": 31}], "signatures": [{"id": 565, "name": "updateEdgePositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update edge path and marker positions."}, "parameters": [{"id": 566, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 571, "name": "updateEdgeText", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2358, "character": 26}], "signatures": [{"id": 572, "name": "updateEdgeText", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update all edge texts in a edge group."}, "parameters": [{"id": 573, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of single edge group"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 574, "name": "d", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge datum"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 575, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "force text to re-wrap\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 647, "name": "updateEdgeTextPositions", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2971, "character": 35}], "signatures": [{"id": 648, "name": "updateEdgeTextPositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update all edge text positions in a edge group."}, "parameters": [{"id": 649, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of single edge group"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 650, "name": "d", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge datum\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 595, "name": "updateEndMarker", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2689, "character": 27}], "signatures": [{"id": 596, "name": "updateEndMarker", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update a specific edge end marker (either start or end marker)."}, "parameters": [{"id": 597, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of single edge group"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 598, "name": "marker", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the special end marker"}, "type": {"type": "reference", "id": 1102, "name": "Marker"}}, {"id": 599, "name": "markerClass", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the css class to select for"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 600, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge datum this marker belongs to\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 630, "name": "updateEndMarkerPosition", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2848, "character": 35}], "signatures": [{"id": 631, "name": "updateEndMarkerPosition", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update a single end marker position (either start or end marker)."}, "parameters": [{"id": 632, "name": "path", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the path selection"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGPathElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 633, "name": "length", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the path length"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 634, "name": "positionOnLine", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "positionOnLine at the marker"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 635, "name": "marker", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the marker"}, "type": {"type": "reference", "id": 1102, "name": "Marker"}}, {"id": 636, "name": "handle", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the link handle at the path end of the marker; can be `null`"}, "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}}, {"id": 637, "name": "markerClass", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the class of the marker"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 638, "name": "strokeWidth", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge stroke width"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 639, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of a single edge group\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 626, "name": "updateEndMarkerPositions", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2819, "character": 36}], "signatures": [{"id": 627, "name": "updateEndMarkerPositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update positions of edge-end and edge-start marker."}, "parameters": [{"id": 628, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of single edge group"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 629, "name": "d", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge datum\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 591, "name": "updateEndMarkers", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2676, "character": 28}], "signatures": [{"id": 592, "name": "updateEndMarkers", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update edge-end and edge-start marker."}, "parameters": [{"id": 593, "name": "edgeGroupSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of single edge group"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 205, "name": "Edge"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 594, "name": "d", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "edge datum\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 651, "name": "updateGraphPositions", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3134, "character": 31}], "signatures": [{"id": 652, "name": "updateGraphPositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update all node positions and edge paths."}, "parameters": [{"id": 653, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source used for render events (default: `EventSource.API`)\n"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 654, "name": "updateHighlights", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3158, "character": 27}], "signatures": [{"id": 655, "name": "updateHighlights", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update Node and Edge highlights to match the current selection state and hovered state.", "text": "This should be called after manually changing the selection.\n"}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 587, "name": "updateMarker", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2648, "character": 24}], "signatures": [{"id": 588, "name": "updateMarker", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update existing edge marker."}, "parameters": [{"id": 589, "name": "markerSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 590, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge datum this marker belongs to\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 640, "name": "updateMarkerPositions", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2905, "character": 33}], "signatures": [{"id": 641, "name": "updateMarkerPositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update all edge marker positions"}, "parameters": [{"id": 642, "name": "markerSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 550, "name": "updateNodeClasses", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2127, "character": 28}], "signatures": [{"id": 551, "name": "updateNodeClasses", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update node classes."}, "parameters": [{"id": 552, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "d3 selection of nodes to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 536, "name": "updateNodeDropAreas", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1995, "character": 31}], "signatures": [{"id": 537, "name": "updateNodeDropAreas", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update node drop zones."}, "parameters": [{"id": 538, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of nodes to calculate drop zones for with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 730, "name": "updateNodeHighligts", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 3803, "character": 31}], "signatures": [{"id": 731, "name": "updateNodeHighligts", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate highlighted nodes and update their classes."}, "parameters": [{"id": 732, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 553, "name": "updateNodePositions", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2158, "character": 31}], "signatures": [{"id": 554, "name": "updateNodePositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update node positions."}, "parameters": [{"id": 555, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of nodes to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 539, "name": "updateNodeText", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 2035, "character": 26}], "signatures": [{"id": 540, "name": "updateNodeText", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update text of existing nodes."}, "parameters": [{"id": 541, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "d3 selection of nodes to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 542, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 533, "name": "updateNodes", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1879, "character": 23}], "signatures": [{"id": 534, "name": "updateNodes", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update existing nodes."}, "parameters": [{"id": 535, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "d3 selection of nodes to update with bound data\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 437, "name": "updateSize", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1035, "character": 22}], "signatures": [{"id": 438, "name": "updateSize", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate and store the size of the svg."}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 510, "name": "updateStaticContentTemplate", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1793, "character": 39}], "signatures": [{"id": 511, "name": "updateStaticContentTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update the static content template of a `SVGGElement` to the new template id.", "text": "If the `SVGGElement` already uses the template the content is not touched.\n"}, "typeParameter": [{"id": 512, "name": "T", "kind": 131072, "kindString": "Type parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}]}}], "parameters": [{"id": 513, "name": "element", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the lement to update the content"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "name": "T"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 514, "name": "templateId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new template ID"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 515, "name": "templateType", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template type to use\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 445, "name": "updateTemplates", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1097, "character": 26}], "signatures": [{"id": 446, "name": "updateTemplates", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update the template cache from the provided svg or the current svg.", "text": "This method will add missing `default` and `default-marker` templates before updating the template cache.\nIt will also add a `default-textcomponent` template and a `default` EdgePathGenerator to the respective registrys.\n"}, "parameters": [{"id": 447, "name": "svg", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGSVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 499, "name": "updateTextElements", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1691, "character": 29}], "signatures": [{"id": 500, "name": "updateTextElements", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Updates and reflows all text elements in nodes and edges."}, "parameters": [{"id": 501, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "force text rewrap even when text has not changed\n     (useful if node classes can change text attributes like size)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 439, "name": "zoomToBoundingBox", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1049, "character": 28}], "signatures": [{"id": 440, "name": "zoomToBoundingBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Zooms and pans the graph to get all content inside the visible area."}, "parameters": [{"id": 441, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if false only zooms in zoomMode 'automatic' and 'both' (default=true)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "true"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 442, "name": "zoomToBox", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "grapheditor.ts", "line": 1075, "character": 20}], "signatures": [{"id": 443, "name": "zoomToBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Zoom to the given box.", "text": "The box will be centered in the view with some padding around.\n"}, "parameters": [{"id": 444, "name": "box", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a box in graph coordinates\n"}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [246]}, {"title": "Properties", "kind": 1024, "children": [262, 265, 267, 264, 268, 323, 263, 259, 260, 258, 272, 266, 270, 271, 254, 252, 273, 261, 275, 253, 274, 287, 291, 295, 299, 305, 248, 255, 316, 311, 269, 251, 250, 249, 256, 257]}, {"title": "Accessors", "kind": 262144, "children": [338, 336, 334, 346, 283, 285, 352, 342, 350, 356, 244]}, {"title": "Methods", "kind": 2048, "children": [473, 448, 404, 371, 362, 601, 576, 606, 612, 621, 396, 451, 360, 656, 659, 392, 667, 479, 528, 408, 526, 415, 418, 522, 518, 482, 470, 375, 385, 382, 459, 524, 455, 520, 516, 530, 431, 434, 429, 464, 736, 685, 671, 676, 680, 688, 694, 748, 721, 698, 706, 715, 718, 711, 702, 727, 738, 724, 743, 546, 427, 411, 378, 388, 400, 421, 367, 424, 643, 492, 485, 502, 663, 559, 543, 567, 561, 556, 733, 581, 584, 564, 571, 647, 595, 630, 626, 591, 651, 654, 587, 640, 550, 536, 730, 553, 539, 533, 437, 510, 445, 499, 439, 442]}], "sources": [{"fileName": "grapheditor.ts", "line": 56, "character": 32}], "extendedTypes": [{"type": "reference", "name": "HTMLElement"}]}], "groups": [{"title": "Enumerations", "kind": 4, "children": [239]}, {"title": "Classes", "kind": 128, "children": [243]}], "sources": [{"fileName": "grapheditor.ts", "line": 1, "character": 0}]}, {"id": 751, "name": "grouping", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 874, "name": "GroupingManager", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Class managing all node groups."}, "children": [{"id": 875, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 876, "name": "new GroupingManager", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "parameters": [{"id": 877, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "reference", "id": 874, "name": "GroupingManager"}}]}, {"id": 879, "name": "graphEditor", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "comment": {"shortText": "Reference to the grapheditor instance to dispatch events or get nodes."}, "sources": [{"fileName": "grouping.ts", "line": 438, "character": 23}], "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 878, "name": "groupsById", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "comment": {"shortText": "Map containing all node groups by id."}, "sources": [{"fileName": "grouping.ts", "line": 435, "character": 22}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 786, "name": "NodeGroup"}], "name": "Map"}}, {"id": 935, "name": "_leaveTree", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 753, "character": 22}], "signatures": [{"id": 936, "name": "_leaveTree", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove the group and all its children that are part of the same tree recursively from the tree given by treeRootId.", "text": "If rejoin is true and the group is part of another group that is in the same tree it will\nset its tree parent to that group instead of leaving the tree. If more than one parent is\npart of the tree the parent with the smallest treeDepth (closest to the root) is chosen.\n"}, "parameters": [{"id": 937, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should leave its tree"}, "type": {"type": "reference", "id": 786, "name": "NodeGroup"}}, {"id": 938, "name": "treeRootId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the tree root of the tree to leave (used for the recursive calls)"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 939, "name": "rejoin", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if true the group will try to rejoin the same tree if another parent of the group is part of the same tree"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}, {"id": 940, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 941, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that should be used for new events\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 885, "name": "addNodeToGroup", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 500, "character": 18}], "signatures": [{"id": 886, "name": "addNodeToGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a node to a group.", "text": "For the group behaviour to work correctly both the groupId and the nodeId schould correspond\nto an existing node in the grapheditor.\n\nThis method checks if adding nodeId to the group would create a cycle in the group graph by using `getAllChildrenOf`.\nIt also checks if `nodeId == groupId` and aborts if true.\n\nThe method updates the group depths of all affected groups recursively.\n\nIf the parent group is part of a tree and the child group is not part of a tree the child group is added to the parents tree.\n\nThe 'groupjoin' event is the last event dispatched by this method.\nThe `afterGroupJoin` callback of the parent group behaviour is called after the 'groupjoin' event was dispatched.\n", "returns": "true iff the node was successfully added to the group\n"}, "parameters": [{"id": 887, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group to add the node to"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 888, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node that should join the group"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 889, "name": "atPosition", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the absolute position where the node will join the group (used for the drag behaviour)"}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 890, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}, {"id": 891, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that caused this node to be added to the group"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 987, "name": "afterGroupJoin", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 1095, "character": 26}], "signatures": [{"id": 988, "name": "afterGroupJoin", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Dispatch a 'groupjoin' event on the grapheditor."}, "parameters": [{"id": 989, "name": "parentGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the parent group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 990, "name": "childGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the child group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 991, "name": "parentNode", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the node of the parent group"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 992, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the node of the child group"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 993, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to use (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}, {"id": 994, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event to use, may be null\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 995, "name": "afterGroupLeave", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 1109, "character": 27}], "signatures": [{"id": 996, "name": "afterGroupLeave", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Dispatch a 'groupleave' event on the grapheditor."}, "parameters": [{"id": 997, "name": "parentGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the parent group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 998, "name": "childGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the child group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 999, "name": "parentNode", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the node of the parent group"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1000, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the node of the child group"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1001, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to use (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}, {"id": 1002, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event to use, may be null\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 880, "name": "clearAllGroups", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 450, "character": 18}], "signatures": [{"id": 881, "name": "clearAllGroups", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Clears all group information stored in this GroupingManager instance.", "text": "Can be useful when redrawing/resetting the graph.\n"}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1003, "name": "dispatchGroupChangeEvent", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 1126, "character": 36}], "signatures": [{"id": 1004, "name": "dispatchGroupChangeEvent", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Dispatch a 'groupjoin' or 'groupleave' event on the grapheditor."}, "parameters": [{"id": 1005, "name": "eventType", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "'groupjoin' or 'groupleave'"}, "type": {"type": "union", "types": [{"type": "literal", "value": "groupjoin"}, {"type": "literal", "value": "groupleave"}]}}, {"id": 1006, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to use"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 1007, "name": "parentGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the parent group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1008, "name": "childGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the child group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1009, "name": "parentNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node of the parent group"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1010, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node of the child group"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1011, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source event to use, may be null\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1012, "name": "dispatchGroupDepthChangedEvent", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 1159, "character": 42}], "signatures": [{"id": 1013, "name": "dispatchGroupDepthChangedEvent", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Dispatch a 'groupdepthchange' event on the grapheditor."}, "parameters": [{"id": 1014, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group for which the group depth has changed"}, "type": {"type": "intrinsic", "name": "any"}}, {"id": 1015, "name": "oldDepth", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the old group depth"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1016, "name": "newDepth", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new group depth"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1017, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to use"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 1018, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event to use, may be null\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1019, "name": "dispatchTreeChangedEvent", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 1187, "character": 36}], "signatures": [{"id": 1020, "name": "dispatchTreeChangedEvent", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Dispatch a 'grouptreechange' event on the grapheditor."}, "parameters": [{"id": 1021, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group for whitch the tree information has changed"}, "type": {"type": "intrinsic", "name": "any"}}, {"id": 1022, "name": "oldInfo", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the old tree information"}, "type": {"type": "reference", "id": 782, "name": "TreeInformation"}}, {"id": 1023, "name": "newInfo", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new tree information"}, "type": {"type": "reference", "id": 782, "name": "TreeInformation"}}, {"id": 1024, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to use"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 1025, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event to use, may be null\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 910, "name": "getAllChildrenOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 608, "character": 20}], "signatures": [{"id": 911, "name": "getAllChildrenOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get a set of **all** children of a group including children of children."}, "parameters": [{"id": 912, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group (e.g. the node id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}]}, {"id": 982, "name": "getCanDraggedNodeLeaveGroup", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 1073, "character": 31}], "signatures": [{"id": 983, "name": "getCanDraggedNodeLeaveGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Check if the node is allowed to leave its group."}, "parameters": [{"id": 984, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that the node wants to leave"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 985, "name": "childGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that wants to leave (the id of the child node)"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 986, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node that wants to leave\n"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 892, "name": "getChildrenOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 538, "character": 17}], "signatures": [{"id": 893, "name": "getChildrenOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the set of **direct** children of this group.", "text": "Do **NOT** alter this set!\n"}, "parameters": [{"id": 894, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group (e.g. the node id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}]}, {"id": 957, "name": "getGroupBehaviourOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 890, "character": 23}], "signatures": [{"id": 958, "name": "getGroupBehaviourOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the group behaviour of a specific group.", "text": "The returned group behaviour will always have at least the default implementations\nfor `captureThisDraggedNode`, `afterNodeJoinedGroup`, `afterNodeLeftGroup` and `beforeNodeMove` set.\n\nThe returned group behaviour may be null if the group id was never used before.\n"}, "parameters": [{"id": 959, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group to get the group behaviour for\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "id": 813, "name": "GroupBehaviour"}}]}, {"id": 976, "name": "getGroupCapturingDraggedNode", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 1026, "character": 32}], "signatures": [{"id": 977, "name": "getGroupCapturingDraggedNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the group that the (dragged) node may join into.", "text": "Only groups in the tree as groupId (including groupId) may capture the (dragged) node.\n\nJoining a group returned by this method does not create a cycle in the group graph!\n\nIf two or more groups in the path to the tree root may capture the (dragged) node\nthe group closest to the groupNode is returned.\n", "returns": "the group id capturing the (dragged) node or null no group was found\n"}, "parameters": [{"id": 978, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group that a new node may join into"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 979, "name": "childGroupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group that may join"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 980, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node with the groupId"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 981, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node with the childGroupId"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 973, "name": "getGroupCapturingIncomingEdge", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 1005, "character": 33}], "signatures": [{"id": 974, "name": "getGroupCapturingIncomingEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the id of the group that will capture incoming edges of the given node.", "text": "Only groups in the same tree that have this node as a direct or indirect child\nmay capture its incoming edges.\n\nIf two or more groups in the path to the tree root may capture its incoming\nedges the group closest to the node is returned.\n", "returns": "the group id capturing incoming edges for the node or the node id if no group was found\n"}, "parameters": [{"id": 975, "name": "child", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a node that is about to have a new incoming edge"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 967, "name": "getGroupCapturingMovementOfChild", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 972, "character": 36}], "signatures": [{"id": 968, "name": "getGroupCapturingMovementOfChild", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the id of the group that will capture the movement of the given node.", "text": "Only groups in the same tree that have this node as a direct or indirect child\nmay capture its movement.\n\nIf two or more groups in the path to the tree root may capture the node movement\nthe group closest to the tree root is returned.\n", "returns": "the group id capturing the movement of the node or the node id if no group was found\n"}, "parameters": [{"id": 969, "name": "child", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a node that is about to move"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 970, "name": "getGroupCapturingOutgoingEdge", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 988, "character": 33}], "signatures": [{"id": 971, "name": "getGroupCapturingOutgoingEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the id of the group that will capture outgoing edges of the given node.", "text": "Only groups in the same tree that have this node as a direct or indirect child\nmay capture its outgoing edges.\n\nIf two or more groups in the path to the tree root may capture its outgoing\nedges the group closest to the node is returned.\n", "returns": "the group id capturing outgoing edges for the node or the node id if no group was found\n"}, "parameters": [{"id": 972, "name": "child", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a node that is about to have a new outgoing edge"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 898, "name": "getGroupDepthOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 564, "character": 19}], "signatures": [{"id": 899, "name": "getGroupDepthOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the depth of the group in the directed acyclic graph.", "text": "A group with no parents has a depth of `0`.\nA group with parents has a depth of `max(parent => parent.depth) + 1`.\n\nThis can be useful for sorting the nodes so that children of a group appear above the group.\nSee also `GraphEditor.onBeforeCompleteRender`.\n"}, "parameters": [{"id": 900, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group (e.g. the node id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 882, "name": "getGroupForNode", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "grouping.ts", "line": 462, "character": 29}], "signatures": [{"id": 883, "name": "getGroupForNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get a NodeGroup object for the given id.", "text": "If the `groupsById` does not contain a group with that id a new NodeGroup\nwith a default GroupBehaviour is created.\n"}, "parameters": [{"id": 884, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a node/group id\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "id": 786, "name": "NodeGroup"}}]}, {"id": 960, "name": "getGroupWithProperty", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "grouping.ts", "line": 927, "character": 34}], "signatures": [{"id": 961, "name": "getGroupWithProperty", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Walk up the tree of the group of childNode and return a group matching the given properties.", "text": "The strategy 'closest-parent' will return the first group it finds.\nThe strategy 'largest-group' will return the group closest to the tree root that matches the given properties.\n\nIf no matching group is found then the id of the childNode is returned!\n", "returns": "the id of the matching group or the childNode id\n"}, "parameters": [{"id": 962, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the groupId to start at"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 963, "name": "groupProperty", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the groupProperty that must be true"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 964, "name": "groupDecisionCallback", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the groupDecisionCallback that must be true (if it is set)"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 965, "name": "strategy", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the strategy to use for finding the group"}, "type": {"type": "union", "types": [{"type": "literal", "value": "closest-parent"}, {"type": "literal", "value": "largest-group"}]}}, {"id": 966, "name": "nodeForDecisionCallback", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the node to use for the decision callback (provide only if different from child node!)"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 895, "name": "getParentsOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 549, "character": 16}], "signatures": [{"id": 896, "name": "getParentsOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the set of direct parents of this group.", "text": "Do **NOT** alter this set!\n"}, "parameters": [{"id": 897, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group (e.g. the node id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}]}, {"id": 907, "name": "getTreeDepthOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 599, "character": 18}], "signatures": [{"id": 908, "name": "getTreeDepthOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the depth of the group in the tree.", "text": "The tree root has a depth of `0`.\nAll other nodes of the tree have a depth of `treeParent.depth + 1`.\n"}, "parameters": [{"id": 909, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group (e.g. the node id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 901, "name": "getTreeParentOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 576, "character": 19}], "signatures": [{"id": 902, "name": "getTreeParentOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the tree parent of the group.", "text": "The tree parent is always a parent of the group too.\nIf the group is the tree root then it will not have a tree parent!\n"}, "parameters": [{"id": 903, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group (e.g. the node id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 904, "name": "getTreeRootOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 587, "character": 17}], "signatures": [{"id": 905, "name": "getTreeRootOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the tree root of the group.", "text": "All groups with the same tree root are part of the same tree.\n"}, "parameters": [{"id": 906, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the group (e.g. the node id)\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 942, "name": "joinTreeOfParent", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 805, "character": 20}], "signatures": [{"id": 943, "name": "joinTreeOfParent", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Let the group join the tree of one of its parents.", "text": "If the given parent is not part of a tree calling this method has the same result as calling `leaveTree`.\n\nIf the group is already part of a tree the group will leave this tree before joining the tree of the parent.\nUse `markAsTreeRoot` on the parent befor joining its tree if the parent is not part of a tree yet.\n", "returns": "true if the group successfully joined the tree of the parent (or the group left its tree and the parent is not part of a tree)\n"}, "parameters": [{"id": 944, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should join a tree"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 945, "name": "treeParentId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the parent of the group that will be the new tree parent"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 946, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}, {"id": 947, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that should be used for new events"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 930, "name": "leaveTree", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 735, "character": 13}], "signatures": [{"id": 931, "name": "leaveTree", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove the group from its tree.", "text": "This method sets all tree related attributes of the group and all its (recursive) children\nthat are part of the same tree to null.\n\nThis method does not remove the group from any group it is currently a child of!\n"}, "parameters": [{"id": 932, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should leave its tree"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 933, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}, {"id": 934, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that should be used for new events\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 948, "name": "markAsTreeRoot", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 835, "character": 18}], "signatures": [{"id": 949, "name": "markAsTreeRoot", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Make an existing group into a tree root.", "text": "This method will make an existing group that is not part of a tree into a tree root.\nAll children of this group that are not part of a tree will join the tree defined\nby the newly created tree root.\n", "returns": "true if the group was successfully marked as a tree root\n"}, "parameters": [{"id": 950, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should become a tree root"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 951, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}, {"id": 952, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that should be used for new events"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 913, "name": "propagateTreeRoot", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 639, "character": 29}], "signatures": [{"id": 914, "name": "propagateTreeRoot", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Propagate tree information from the parent group to the child group (recursively).", "text": "This method adds the parent as the treeParent of the child if the child is not part of a tree.\nThe method is then called recursively with child as the new parent for all children of child.\n"}, "parameters": [{"id": 915, "name": "parent", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "node group from which the tree information should be propagated from"}, "type": {"type": "reference", "id": 786, "name": "NodeGroup"}}, {"id": 916, "name": "child", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "node group that should get the tree information"}, "type": {"type": "reference", "id": 786, "name": "NodeGroup"}}, {"id": 917, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 918, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that should be used for new events\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 924, "name": "removeNodeFromGroup", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 702, "character": 23}], "signatures": [{"id": 925, "name": "removeNodeFromGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove a node from a group.", "text": "This method will only remove direct children from a group!\n\nIf the node is part of another group that is in the same tree it will set its\ntree parent to that group instead of leaving the tree. If more than one parent is\npart of the tree the parent with the smallest treeDepth (closest to the root) is chosen.\n\nThe 'groupleave' event is the last event dispatched by this method.\nThe `afterGroupLeave` callback of the parent group behaviour is called after the 'groupleave' event was dispatched.\n", "returns": "true iff the node was successfully removed from the group\n"}, "parameters": [{"id": 926, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group to remove the node from"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 927, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node that should leave the group"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 928, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events (defaults to `EventSource.API`)"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}, {"id": 929, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that should be used for new events"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 953, "name": "setGroupBehaviourOf", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 864, "character": 23}], "signatures": [{"id": 954, "name": "setGroupBehaviourOf", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Set the graoup behaviour.", "text": "The default implementations for `captureThisDraggedNode`, `afterNodeJoinedGroup`,\n`afterNodeLeftGroup` and `beforeNodeMove` will be inserted into the given groupBehaviour\nif the behaviour does not specify them already.\n"}, "parameters": [{"id": 955, "name": "groupId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group to set the behaviour for"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 956, "name": "groupBehaviour", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group behaviour\n"}, "type": {"type": "reference", "id": 813, "name": "GroupBehaviour"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 919, "name": "updateGroupDepth", "kind": 2048, "kindString": "Method", "flags": {"isPrivate": true}, "sources": [{"fileName": "grouping.ts", "line": 667, "character": 28}], "signatures": [{"id": 920, "name": "updateGroupDepth", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update the group depth recursively."}, "parameters": [{"id": 921, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group that should be updated"}, "type": {"type": "reference", "id": 786, "name": "NodeGroup"}}, {"id": 922, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the event source to be used for dispatched events"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}}, {"id": 923, "name": "sourceEvent", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the source event that should be used for new events\n"}, "type": {"type": "reference", "name": "Event"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [875]}, {"title": "Properties", "kind": 1024, "children": [879, 878]}, {"title": "Methods", "kind": 2048, "children": [935, 885, 987, 995, 880, 1003, 1012, 1019, 910, 982, 892, 957, 976, 973, 967, 970, 898, 882, 960, 895, 907, 901, 904, 942, 930, 948, 913, 924, 953, 919]}], "sources": [{"fileName": "grouping.ts", "line": 433, "character": 28}]}, {"id": 786, "name": "NodeGroup", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Class containing all information of a group.", "text": "This class is not intended to be used outside of the GroupingManager!\n"}, "children": [{"id": 787, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 788, "name": "new NodeGroup", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "parameters": [{"id": 789, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "id": 786, "name": "NodeGroup"}}]}, {"id": 792, "name": "children", "kind": 1024, "kindString": "Property", "flags": {"isReadonly": true}, "comment": {"shortText": "A set of all direct children (group ids)."}, "sources": [{"fileName": "grouping.ts", "line": 48, "character": 21}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}, {"id": 797, "name": "groupBehaviour", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The group behaviour that determines how this group acts."}, "sources": [{"fileName": "grouping.ts", "line": 60, "character": 25}], "type": {"type": "reference", "id": 813, "name": "GroupBehaviour"}}, {"id": 793, "name": "groupDepth", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The depth of the group in the acyclic directed group graph. Initialized as 0. `Max(parents => parents.depth) + 1`"}, "sources": [{"fileName": "grouping.ts", "line": 50, "character": 21}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 790, "name": "groupId", "kind": 1024, "kindString": "Property", "flags": {"isReadonly": true}, "comment": {"shortText": "The id of this group. This should be the same id as the node it represents."}, "sources": [{"fileName": "grouping.ts", "line": 43, "character": 20}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 791, "name": "parents", "kind": 1024, "kindString": "Property", "flags": {"isReadonly": true}, "comment": {"shortText": "A set of all direct parents (group ids)."}, "sources": [{"fileName": "grouping.ts", "line": 46, "character": 20}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}, {"id": 796, "name": "treeDepth", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The depth of the group in the tree. Initialized as 0. `treeParent.treeDepth + 1`"}, "sources": [{"fileName": "grouping.ts", "line": 57, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "implementationOf": {"type": "reference", "id": 785, "name": "TreeInformation.treeDepth"}}, {"id": 795, "name": "treeParent", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The parent that has the same tree root as this group that should be considered the parent for this group and this tree."}, "sources": [{"fileName": "grouping.ts", "line": 55, "character": 21}], "type": {"type": "intrinsic", "name": "string"}, "implementationOf": {"type": "reference", "id": 784, "name": "TreeInformation.treeParent"}}, {"id": 794, "name": "treeRoot", "kind": 1024, "kindString": "Property", "flags": {"isPublic": true}, "comment": {"shortText": "The root of the tree this group belongs to. Null if the group is not part of a tree."}, "sources": [{"fileName": "grouping.ts", "line": 53, "character": 19}], "type": {"type": "intrinsic", "name": "string"}, "implementationOf": {"type": "reference", "id": 783, "name": "TreeInformation.treeRoot"}}], "groups": [{"title": "Constructors", "kind": 512, "children": [787]}, {"title": "Properties", "kind": 1024, "children": [792, 797, 793, 790, 791, 796, 795, 794]}], "sources": [{"fileName": "grouping.ts", "line": 41, "character": 22}], "implementedTypes": [{"type": "reference", "id": 782, "name": "TreeInformation"}]}, {"id": 813, "name": "GroupBehaviour", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface describing the behaviour of a NodeGroup."}, "children": [{"id": 828, "name": "afterNodeJoinedGroup", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Callback called after the childGroup has joined the parent group.", "text": "Default implementation: `defaultAfterNodeJoinedGroup`\n", "tags": [{"tag": "param", "text": "the (parent) group this group behaviour belongs to", "param": "group"}, {"tag": "param", "text": "the child group that joined this group", "param": "childGroup"}, {"tag": "param", "text": "the node corresponding to the parent group, may be null", "param": "groupNode"}, {"tag": "param", "text": "the node corresponding to the child group, may be null", "param": "childNode"}, {"tag": "param", "text": "the instance of the grapheditor", "param": "graphEditor"}, {"tag": "param", "text": "the absolute point where the child node will join the group\n     The actual position of the child node may not be the same as atPosition\n     as it is only updated **after** the node was moved.\n", "param": "atPosition"}]}, "sources": [{"fileName": "grouping.ts", "line": 189, "character": 24}], "type": {"type": "reflection", "declaration": {"id": 829, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 830, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 831, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 832, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 833, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 834, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 835, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 836, "name": "atPosition", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "type": {"type": "reference", "id": 161, "name": "Point"}}], "type": {"type": "intrinsic", "name": "void"}}]}}}, {"id": 837, "name": "afterNodeLeftGroup", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Callback called after the childGroup has left the parent group.", "text": "Default implementation: `defaultAfterNodeLeftGroup`\n", "tags": [{"tag": "param", "text": "the (parent) group this group behaviour belongs to", "param": "group"}, {"tag": "param", "text": "the child group that has left this group", "param": "childGroup"}, {"tag": "param", "text": "the node corresponding to the parent group, may be null", "param": "groupNode"}, {"tag": "param", "text": "the node corresponding to the child group, may be null", "param": "childNode"}, {"tag": "param", "text": "the instance of the grapheditor\n", "param": "graphEditor"}]}, "sources": [{"fileName": "grouping.ts", "line": 201, "character": 22}], "type": {"type": "reflection", "declaration": {"id": 838, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 839, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 840, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 841, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 842, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 843, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 844, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "intrinsic", "name": "void"}}]}}}, {"id": 826, "name": "allowDraggedNodesLeavingGroup", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true dragged nodes can generally leave this group."}, "sources": [{"fileName": "grouping.ts", "line": 171, "character": 33}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 824, "name": "allowFreePositioning", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true always allow free positioning of child nodes inside the group. (Always true if the node has no defined drop zones.)"}, "sources": [{"fileName": "grouping.ts", "line": 162, "character": 24}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 827, "name": "allowThisDraggedNodeLeavingGroup", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Decide whether this specific node may leave this group."}, "sources": [{"fileName": "grouping.ts", "line": 173, "character": 36}], "type": {"type": "reference", "id": 798, "name": "GroupBehaviourDecisionCallback"}}, {"id": 853, "name": "beforeNodeMove", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Callback called before a direct child in the same tree is moved to a new position.", "text": "Default implementation: `defaultBeforeNodeMove`\n", "tags": [{"tag": "param", "text": "the (parent) group this group behaviour belongs to", "param": "group"}, {"tag": "param", "text": "the child group that is beeing moved", "param": "childGroup"}, {"tag": "param", "text": "the node corresponding to the parent group, may be null", "param": "groupNode"}, {"tag": "param", "text": "the node corresponding to the child group", "param": "childNode"}, {"tag": "param", "text": "the absolute position the node will be moved to", "param": "newPosition"}, {"tag": "param", "text": "the instance of the grapheditor", "param": "graphEditor"}, {"tag": "returns", "text": "`true` if the graph needs to be completely rerendered to reflect all changes\n"}]}, "sources": [{"fileName": "grouping.ts", "line": 229, "character": 18}], "type": {"type": "reflection", "declaration": {"id": 854, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 855, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 856, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 857, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 858, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 859, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 860, "name": "newPosition", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 861, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "boolean"}, {"type": "intrinsic", "name": "void"}]}}]}}}, {"id": 815, "name": "captureChildMovement", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true this group captures all movement events for nodes in the same tree.\nA captured movement event acts as if the node of this group is moved instead of the original target.", "text": "The group and children must be part of the same tree for this to work!\n"}, "sources": [{"fileName": "grouping.ts", "line": 109, "character": 24}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 816, "name": "captureChildMovementForNode", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Decide whether to capture the movement event from this particular node.", "text": "The default is `() => true`\n"}, "sources": [{"fileName": "grouping.ts", "line": 115, "character": 31}], "type": {"type": "reference", "id": 798, "name": "GroupBehaviourDecisionCallback"}}, {"id": 823, "name": "captureDraggedNodes", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true dragged nodes can generally join this group."}, "sources": [{"fileName": "grouping.ts", "line": 160, "character": 23}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 820, "name": "captureIncomingEdges", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true this group captures all incoming dragged edges of child nodes (including transitive children) in the same tree.\nA captured edge behaves as if it is targeting this group's node.", "text": "The group and children must be part of the same tree for this to work!\n"}, "sources": [{"fileName": "grouping.ts", "line": 144, "character": 24}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 821, "name": "captureIncomingEdgesForNode", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Decide whether to capture the incoming dragged edge from this particular node.", "text": "The default is `() => true`\n"}, "sources": [{"fileName": "grouping.ts", "line": 150, "character": 31}], "type": {"type": "reference", "id": 798, "name": "GroupBehaviourDecisionCallback"}}, {"id": 817, "name": "captureOutgoingEdges", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true this group captures all outgoing dragged edges of child nodes (including transitive children) in the same tree.\nA captured edge behaves as if it is dragged from this group's node.", "text": "The group and children must be part of the same tree for this to work!\n"}, "sources": [{"fileName": "grouping.ts", "line": 123, "character": 24}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 818, "name": "captureOutgoingEdgesForNode", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Decide whether to capture the outgoing dragged edge from this particular node.", "text": "The default is `() => true`\n"}, "sources": [{"fileName": "grouping.ts", "line": 129, "character": 31}], "type": {"type": "reference", "id": 798, "name": "GroupBehaviourDecisionCallback"}}, {"id": 825, "name": "captureThisDraggedNode", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Decide whether this specific node may join this group.", "text": "Default implementation: `defaultCaptureThisDraggedNode`\n"}, "sources": [{"fileName": "grouping.ts", "line": 168, "character": 26}], "type": {"type": "reference", "id": 798, "name": "GroupBehaviourDecisionCallback"}}, {"id": 871, "name": "childNodePositions", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A map containing the positions of nodes inside the group.", "text": "The position can either be the id of a drop zone (string) or a point relative to the node of the group.\nFor drop zones the center of the bounding box is the position the node will be placed.\n\nA node with a position in this map will not move from this position by dragging or calling moveNode!\nDelete the node id from this map to allow free movement for the node.\n"}, "sources": [{"fileName": "grouping.ts", "line": 255, "character": 22}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 161, "name": "Point"}]}], "name": "Map"}}, {"id": 822, "name": "delegateIncomingEdgeTargetToNode", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Delegate an incoming edge from this group to another node.\nA delegated edge behaves as if target is the given node.", "text": "The default is to not change the current target.\n"}, "sources": [{"fileName": "grouping.ts", "line": 157, "character": 36}], "type": {"type": "reference", "id": 806, "name": "GroupBehaviourEdgeDelegationCallback"}}, {"id": 819, "name": "delegateOutgoingEdgeSourceToNode", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Delegate an outgoing edge from this group to another node.\nA delegated edge behaves as if it is dragged from the given node.", "text": "The default is to not change the current source.\n"}, "sources": [{"fileName": "grouping.ts", "line": 136, "character": 36}], "type": {"type": "reference", "id": 806, "name": "GroupBehaviourEdgeDelegationCallback"}}, {"id": 814, "name": "moveChildrenAlongGoup", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true all children (including transitive children) will move the same amount as the group."}, "sources": [{"fileName": "grouping.ts", "line": 102, "character": 25}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 870, "name": "occupiedDropZones", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A map mapping the id of occupied drop zones to the id of the node occupying them."}, "sources": [{"fileName": "grouping.ts", "line": 245, "character": 21}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "string"}], "name": "Map"}}, {"id": 862, "name": "onNodeMoveEnd", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Callback called after a direct child in the same tree finished moving.", "text": "This will not be called if the node left the group while moving!\n", "tags": [{"tag": "param", "text": "the (parent) group this group behaviour belongs to", "param": "group"}, {"tag": "param", "text": "the child group that was moved", "param": "childGroup"}, {"tag": "param", "text": "the node corresponding to the parent group, may be null", "param": "groupNode"}, {"tag": "param", "text": "the node corresponding to the child group", "param": "childNode"}, {"tag": "param", "text": "the instance of the grapheditor", "param": "graphEditor"}, {"tag": "returns", "text": "`true` if the graph needs to be completely rerendered to reflect all changes\n"}]}, "sources": [{"fileName": "grouping.ts", "line": 242, "character": 17}], "type": {"type": "reflection", "declaration": {"id": 863, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 864, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 865, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 866, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 867, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 868, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 869, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "boolean"}, {"type": "intrinsic", "name": "void"}]}}]}}}, {"id": 845, "name": "onNodeMoveStart", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Callback called before a direct child in the same tree is moved.", "text": "This will not be called if the node joins the group while moving!\n", "tags": [{"tag": "param", "text": "the (parent) group this group behaviour belongs to", "param": "group"}, {"tag": "param", "text": "the child group that is about to move", "param": "childGroup"}, {"tag": "param", "text": "the node corresponding to the parent group, may be null", "param": "groupNode"}, {"tag": "param", "text": "the node corresponding to the child group", "param": "childNode"}, {"tag": "param", "text": "the instance of the grapheditor", "param": "graphEditor"}, {"tag": "returns", "text": "`true` if the graph needs to be completely rerendered to reflect all changes\n"}]}, "sources": [{"fileName": "grouping.ts", "line": 215, "character": 19}], "type": {"type": "reflection", "declaration": {"id": 846, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 847, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 848, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 849, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 850, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 851, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 852, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "boolean"}, {"type": "intrinsic", "name": "void"}]}}]}}}], "groups": [{"title": "Properties", "kind": 1024, "children": [828, 837, 826, 824, 827, 853, 815, 816, 823, 820, 821, 817, 818, 825, 871, 822, 819, 814, 870, 862, 845]}], "sources": [{"fileName": "grouping.ts", "line": 99, "character": 31}], "indexSignature": {"id": 872, "name": "__index", "kind": 8192, "kindString": "Index signature", "flags": {}, "comment": {"shortText": "Interface describing the behaviour of a NodeGroup."}, "parameters": [{"id": 873, "name": "prop", "kind": 32768, "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "any"}}}, {"id": 782, "name": "TreeInformation", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface for tree information containing the root of the tree,\nthe direct tree parent and the depth of this group."}, "children": [{"id": 785, "name": "treeDepth", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The depth of the group in the tree. The tree root has depth 0."}, "sources": [{"fileName": "grouping.ts", "line": 33, "character": 13}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 784, "name": "treeParent", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The parent group id of this group. The tree root has no parent."}, "sources": [{"fileName": "grouping.ts", "line": 31, "character": 14}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 783, "name": "treeRoot", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The root (group id) of the tree. The tree root has itself as the tree root."}, "sources": [{"fileName": "grouping.ts", "line": 29, "character": 12}], "type": {"type": "intrinsic", "name": "string"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [785, 784, 783]}], "sources": [{"fileName": "grouping.ts", "line": 27, "character": 32}], "implementedBy": [{"type": "reference", "id": 786, "name": "NodeGroup"}]}, {"id": 798, "name": "GroupBehaviourDecisionCallback", "kind": 4194304, "kindString": "Type alias", "flags": {}, "comment": {"shortText": "A function that given a group, a (candidate) child group and the corresponding nodes\ndecides if a certain action can be done.", "tags": [{"tag": "param", "text": "the group id of this group", "param": "group"}, {"tag": "param", "text": "the group id of the group (or node) the action will be performed for", "param": "childGroup"}, {"tag": "param", "text": "the node in the grapheditor with the same id as `group`, may be null.", "param": "groupNode"}, {"tag": "param", "text": "the node in the grapheditor with the same id as `childGroup`, may be null.", "param": "childNode"}, {"tag": "param", "text": "the instance of the grapheditor.", "param": "graphEditor"}, {"tag": "returns", "text": "true iff the action should be performed.\n"}]}, "sources": [{"fileName": "grouping.ts", "line": 81, "character": 42}], "type": {"type": "reflection", "declaration": {"id": 799, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 81, "character": 44}], "signatures": [{"id": 800, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 801, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 802, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 803, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 804, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 805, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "GraphEditor"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}}}, {"id": 806, "name": "GroupBehaviourEdgeDelegationCallback", "kind": 4194304, "kindString": "Type alias", "flags": {}, "comment": {"shortText": "A function that given a group, the corresponding node and an edge\ndecides which node should handle the edge.", "tags": [{"tag": "param", "text": "the group id of this group", "param": "group"}, {"tag": "param", "text": "the node in the grapheditor with the same id as `group`, may be null.", "param": "groupNode"}, {"tag": "param", "text": "the (incoming or outgoing) edge", "param": "edge"}, {"tag": "param", "text": "the instance of the grapheditor.", "param": "graphEditor"}, {"tag": "returns", "text": "the id of an existing Node that should handle this edge (as its source or target)\n"}]}, "sources": [{"fileName": "grouping.ts", "line": 93, "character": 48}], "type": {"type": "reflection", "declaration": {"id": 807, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 93, "character": 50}], "signatures": [{"id": 808, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 809, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 810, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 811, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 812, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "GraphEditor"}}], "type": {"type": "intrinsic", "name": "string"}}]}}}, {"id": 767, "name": "defaultAfterNodeJoinedGroup", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 397, "character": 43}], "signatures": [{"id": 768, "name": "defaultAfterNodeJoinedGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Default behaviour of the `afterNodeJoinedGroup` callback of a GroupBehaviour.", "text": "This method calls `beforeNodeMove` of the GroupBehaviour.\n\nThis method assumes `beforeNodeMove` to be implemented by `defaultBeforeNodeMove`.\nIf `beforeNodeMove` has a different behaviour than the default implementation then\nthis method should also be replaced by a custom method!\n"}, "parameters": [{"id": 769, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the (parent) group this group behaviour belongs to"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 770, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the child group that joined this group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 771, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node corresponding to the parent group, may be null"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 772, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node corresponding to the child group, may be null"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 773, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the instance of the grapheditor"}, "type": {"type": "reference", "id": 243, "name": "GraphEditor"}}, {"id": 774, "name": "atPosition", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the absolute point where the child node will join the group\n     The actual position of the child node may not be the same as atPosition\n     as it is only updated **after** the node was moved.\n"}, "type": {"type": "reference", "id": 161, "name": "Point"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 775, "name": "defaultAfterNodeLeftGroup", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 416, "character": 41}], "signatures": [{"id": 776, "name": "defaultAfterNodeLeftGroup", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Default behaviour of the `afterNodeLeftGroup` callback of a GroupBehaviour.", "text": "This method removes childNodePositions for the node that left and frees all dropzones\nthat were occupied by the node that left.\n"}, "parameters": [{"id": 777, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the (parent) group this group behaviour belongs to"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 778, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the child group that has left this group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 779, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node corresponding to the parent group, may be null"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 780, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node corresponding to the child group, may be null"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 781, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the instance of the grapheditor\n"}, "type": {"type": "reference", "id": 243, "name": "GraphEditor"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 759, "name": "defaultBeforeNodeMove", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 328, "character": 37}], "signatures": [{"id": 760, "name": "defaultBeforeNodeMove", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Default behaviour of the `beforeNodeMove` callback of a GroupBehaviour.", "text": "If both groupNode and childNode are not null and the groupNode has dropzones this\nmethod places the childNode at the nearest unoccupied dropzone.\n\nThis method only considers dropzones with a filter allowing the type of the childNode.\n\nThis method uses (and creates) the `occupiedDropZones` map and the `childNodePositions` of the groupBehaviour.\n\nThe nearest dropzone is determined by the distance of the dropzone center to the coordinates of the childNode.\n\nIf the childNode was already occupying a dropZone it will still change to a nearer dropzone when moved.\n"}, "parameters": [{"id": 761, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the (parent) group this group behaviour belongs to"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 762, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the child group that is beeing moved"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 763, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node corresponding to the parent group, may be null"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 764, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node corresponding to the child group"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 765, "name": "newPosition", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the absolute position the node will be moved to"}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 766, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the instance of the grapheditor\n"}, "type": {"type": "reference", "id": 243, "name": "GraphEditor"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 752, "name": "defaultCaptureThisDraggedNode", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "grouping.ts", "line": 279, "character": 45}], "signatures": [{"id": 753, "name": "defaultCaptureThisDraggedNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Default behaviour of the `captureThisDraggedNode` GroupBehaviourDecisionCallback of a GroupBehaviour.", "text": "If the group behaviour has `allowFreePositioning` set as `true` then this method\nalways returns true.\n\nThis method rerturns true if the group node has an unoccupied dropzone that allows the type\nof the childNode in its filters.\n\nIf the dropzone is already marked as occupied by the same id as the childNode the dropzone\nis **not** considered occupied by this method!\n", "returns": "true iff the node can join the group\n"}, "parameters": [{"id": 754, "name": "group", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group id of this group"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 755, "name": "childGroup", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the group id of the group (or node) the action will be performed for"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 756, "name": "groupNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node in the grapheditor with the same id as `group`, may be null."}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 757, "name": "childNode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node in the grapheditor with the same id as `childGroup`, may be null."}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 758, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the instance of the grapheditor."}, "type": {"type": "reference", "id": 243, "name": "GraphEditor"}}], "type": {"type": "intrinsic", "name": "boolean"}}]}], "groups": [{"title": "Classes", "kind": 128, "children": [874, 786]}, {"title": "Interfaces", "kind": 256, "children": [813, 782]}, {"title": "Type aliases", "kind": 4194304, "children": [798, 806]}, {"title": "Functions", "kind": 64, "children": [767, 775, 759, 752]}], "sources": [{"fileName": "grouping.ts", "line": 1, "character": 0}]}, {"id": 1026, "name": "index", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1486, "name": "DefaultResizeStrategy", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 1220}, {"id": 1484, "name": "DraggedEdge", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 221}, {"id": 1483, "name": "Edge", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 205}, {"id": 1482, "name": "EdgeDragHandle", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 189}, {"id": 1473, "name": "EventSource", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 239}, {"id": 1474, "name": "Node", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 1129}, {"id": 1475, "name": "NodeMovementInformation", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 1137}, {"id": 1480, "name": "PathPositionRotationAndScale", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 164}, {"id": 1479, "name": "Point", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 161}, {"id": 1487, "name": "ResizeOverlayOptions", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 1234}, {"id": 1485, "name": "ResizeStrategy", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 1201}, {"id": 1488, "name": "ResizingManager", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 1254}, {"id": 1481, "name": "TextComponent", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 172}, {"id": 1478, "name": "edgeId", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 158}, {"id": 1476, "name": "normalizePositionOnLine", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 152}, {"id": 1477, "name": "setDefaultEdgeDragHandles", "kind": 16777216, "kindString": "Reference", "flags": {}, "target": 155}], "groups": [{"title": "References", "kind": 16777216, "children": [1486, 1484, 1483, 1482, 1473, 1474, 1475, 1480, 1479, 1487, 1485, 1488, 1481, 1478, 1476, 1477]}], "sources": [{"fileName": "index.ts", "line": 1, "character": 0}]}, {"id": 1067, "name": "link-handle", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1092, "name": "LinkHandle", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Start- or End-Point of edge."}, "children": [{"id": 1099, "name": "absoluteRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation angle in degree.", "text": "Absolute rotation overwrites any relative rotation.\n"}, "sources": [{"fileName": "rotation-vector.ts", "line": 35, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1346, "name": "RotationData.absoluteRotation"}}, {"id": 1093, "name": "id", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Normally the index of the LinkHandle. Unique for each template."}, "sources": [{"fileName": "link-handle.ts", "line": 26, "character": 6}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1098, "name": "isDynamicTemplate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True iff the link handle uses a dynamic template."}, "sources": [{"fileName": "link-handle.ts", "line": 40, "character": 21}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1096, "name": "normal", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Direction vecter pointing in the direction an\nedge should come in/out of the handle.\nUsually away from the node center."}, "sources": [{"fileName": "link-handle.ts", "line": 36, "character": 10}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}, {"id": 1100, "name": "relativeRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Relative rotation angle in degree."}, "sources": [{"fileName": "rotation-vector.ts", "line": 37, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 1347, "name": "RotationData.relativeRotation"}}, {"id": 1097, "name": "template", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The template to use for the link handle."}, "sources": [{"fileName": "link-handle.ts", "line": 38, "character": 12}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 1094, "name": "x", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "X coordinate relative to node center"}, "sources": [{"fileName": "link-handle.ts", "line": 28, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1095, "name": "y", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Y coordinate relative to node center"}, "sources": [{"fileName": "link-handle.ts", "line": 30, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1099, 1093, 1098, 1096, 1100, 1097, 1094, 1095]}], "sources": [{"fileName": "link-handle.ts", "line": 24, "character": 27}], "extendedTypes": [{"type": "reference", "id": 1345, "name": "RotationData"}]}, {"id": 1068, "name": "calculateLinkHandleNormal", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle.ts", "line": 48, "character": 41}], "signatures": [{"id": 1069, "name": "calculateLinkHandleNormal", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate a vector of length 1 facing away from 0,0 towards handle.x,handle.y."}, "parameters": [{"id": 1070, "name": "handle", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "link handle to calculate normal for\n"}, "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1078, "name": "handlesForCircle", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle.ts", "line": 107, "character": 32}], "signatures": [{"id": 1079, "name": "handlesForCircle", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generate link handles list for circle."}, "parameters": [{"id": 1080, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "x coordinate of the center of the circle"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1081, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "y coordinate of the center of the circle"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1082, "name": "radius", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "of the circle"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1083, "name": "linkHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "one of ['all', 'minimal']\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}, {"id": 1088, "name": "handlesForPath", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle.ts", "line": 182, "character": 30}], "signatures": [{"id": 1089, "name": "handlesForPath", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generate link handles list for a path."}, "parameters": [{"id": 1090, "name": "path", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {}, "type": {"type": "reference", "name": "SVGPathElement"}}, {"id": 1091, "name": "linkHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "one of ['all', 'minimal']\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}, {"id": 1084, "name": "handlesForPolygon", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle.ts", "line": 152, "character": 33}], "signatures": [{"id": 1085, "name": "handlesForPolygon", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generate link handles list for a polygon."}, "parameters": [{"id": 1086, "name": "points", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 161, "name": "Point"}}}, {"id": 1087, "name": "linkHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "one of ['all', 'minimal']\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}, {"id": 1071, "name": "handlesForRectangle", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle.ts", "line": 68, "character": 35}], "signatures": [{"id": 1072, "name": "handlesForRectangle", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Generate link handles list for a rectangle."}, "parameters": [{"id": 1073, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "x coordinate of the upper left corner of the rectangle"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1074, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "y coordinate of the upper left corner of the rectangle"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1075, "name": "width", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "of the rectangle"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1076, "name": "height", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1077, "name": "linkHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "one of ['all', 'edges', 'corners', 'minimal'] 'minimal' is an alias for 'edges'\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}], "groups": [{"title": "Interfaces", "kind": 256, "children": [1092]}, {"title": "Functions", "kind": 64, "children": [1068, 1078, 1088, 1084, 1071]}], "sources": [{"fileName": "link-handle.ts", "line": 1, "character": 0}]}, {"id": 1027, "name": "link-handle-helper", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1034, "name": "applyUserLinkHandleCalculationCallback", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 65, "character": 54}], "signatures": [{"id": 1035, "name": "applyUserLinkHandleCalculationCallback", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Apply the user provided callback for link handle calculation and return a sanitized list of source and target handles."}, "parameters": [{"id": 1036, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}, {"id": 1037, "name": "sourceHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source handle list"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1038, "name": "source", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source node"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1039, "name": "targetHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target handle list"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1040, "name": "target", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target node (or position for dragged edges)"}, "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 161, "name": "Point"}]}}, {"id": 1041, "name": "callback", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the user provided callback (can be null)\n"}, "type": {"type": "reflection", "declaration": {"id": 1042, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 72, "character": 14}], "signatures": [{"id": 1043, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 1047, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 205, "name": "Edge"}, {"type": "reference", "id": 221, "name": "DraggedEdge"}]}}, {"id": 1048, "name": "sourceHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1049, "name": "source", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1050, "name": "targetHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1051, "name": "target", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 161, "name": "Point"}]}}], "type": {"type": "reflection", "declaration": {"id": 1044, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 1045, "name": "sourceHandles", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 72, "character": 154}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1046, "name": "targetHandles", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 72, "character": 183}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1045, 1046]}], "sources": [{"fileName": "link-handle-helper.ts", "line": 72, "character": 138}]}}}]}}}], "type": {"type": "reflection", "declaration": {"id": 1052, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 1053, "name": "sourceHandles", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 73, "character": 18}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1054, "name": "targetHandles", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 73, "character": 47}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1053, 1054]}], "sources": [{"fileName": "link-handle-helper.ts", "line": 73, "character": 2}]}}}]}, {"id": 1058, "name": "calculateNearestHandles", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 121, "character": 39}], "signatures": [{"id": 1059, "name": "calculateNearestHandles", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the pair of link handles that is closest to each other."}, "parameters": [{"id": 1060, "name": "sourceHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "list of link handles for the source node (must contain at least one handle!)"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1061, "name": "sourceCoords", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source node position (default: `{x: 0, y: 0}`)"}, "type": {"type": "reference", "id": 161, "name": "Point"}}, {"id": 1062, "name": "targetHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "list of link handles for the target node (must contain at least one handle!)"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}, {"id": 1063, "name": "targetCoords", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the target node position(default: `{x: 1, y: 1}`)\n"}, "type": {"type": "reference", "id": 161, "name": "Point"}}], "type": {"type": "reflection", "declaration": {"id": 1064, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 1065, "name": "sourceHandle", "kind": 1024, "kindString": "Property", "flags": {}, "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}, "defaultValue": "..."}, {"id": 1066, "name": "targetHandle", "kind": 1024, "kindString": "Property", "flags": {}, "type": {"type": "reference", "id": 1092, "name": "LinkHandle"}, "defaultValue": "..."}], "groups": [{"title": "Properties", "kind": 1024, "children": [1065, 1066]}]}}}]}, {"id": 1028, "name": "getNodeLinkHandles", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 34, "character": 34}], "signatures": [{"id": 1029, "name": "getNodeLinkHandles", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the link handles of a node."}, "parameters": [{"id": 1030, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the selection of the node to get the link handles for"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "id": 1129, "name": "Node"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}, {"id": 1031, "name": "templateCache", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template cache"}, "type": {"type": "reference", "id": 1365, "name": "StaticTemplateRegistry"}}, {"id": 1032, "name": "dynamicTemplateRegistry", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the dynamic template registry"}, "type": {"type": "reference", "id": 1397, "name": "DynymicTemplateRegistry"}}, {"id": 1033, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the graph editor instance holding the node\n"}, "type": {"type": "reference", "id": 243, "name": "GraphEditor"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}, {"id": 1055, "name": "sanitizeHandleList", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "link-handle-helper.ts", "line": 106, "character": 34}], "signatures": [{"id": 1056, "name": "sanitizeHandleList", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Sanitizes a link handle list.", "text": "The returned list is never null and contains at least one link handle.\n"}, "parameters": [{"id": 1057, "name": "handles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the handle list to sanitize\n"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}], "groups": [{"title": "Functions", "kind": 64, "children": [1034, 1058, 1028, 1055]}], "sources": [{"fileName": "link-handle-helper.ts", "line": 1, "character": 0}]}, {"id": 1101, "name": "marker", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1117, "name": "LineAttachementInfo", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Helper class to calculate where the edge attaches to an end marker."}, "children": [{"id": 1118, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 1119, "name": "new LineAttachementInfo", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "comment": {"shortText": "Create a new line attachement info object.", "text": "The attachement point can either be an offset from 0,0 or a point relative to 0,0 of the template.\nTo specify an offset use a single number or a string containing exactly one number.\nTo specify a point use a string with two numbers seperated by a space or a point object.\nThe line attachement point must not include any transformations applied to the marker when it is rendered.\n\nIf only an offset was specified the attachement info is not directional.\n"}, "parameters": [{"id": 1120, "name": "lineAttachementPoint", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the attachement point relative to 0,0 in the template\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}, {"type": "reference", "id": 161, "name": "Point"}]}}], "type": {"type": "reference", "id": 1117, "name": "LineAttachementInfo"}}]}, {"id": 1123, "name": "attachementOffset", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "marker.ts", "line": 51, "character": 29}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1121, "name": "isDirectional", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "marker.ts", "line": 49, "character": 25}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1122, "name": "lineAttachementAngle", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "marker.ts", "line": 50, "character": 32}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1124, "name": "getRotationVector", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "marker.ts", "line": 110, "character": 21}], "signatures": [{"id": 1125, "name": "getRotationVector", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Return a rotation vector pointing at the translated line attachement point."}, "parameters": [{"id": 1126, "name": "angle", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the angle the marker is currently rotated"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1127, "name": "scale", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the current scale of the marker\n"}, "type": {"type": "intrinsic", "name": "number"}}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [1118]}, {"title": "Properties", "kind": 1024, "children": [1123, 1121, 1122]}, {"title": "Methods", "kind": 2048, "children": [1124]}], "sources": [{"fileName": "marker.ts", "line": 47, "character": 32}]}, {"id": 1102, "name": "Marker", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface describing an edge marker."}, "children": [{"id": 1113, "name": "absolutePositionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The absolute position of the path element on the edge.", "text": "A positive value is counted from the start of the path.\nA negative value is counted from the end of the path.\nIf the absolute value is longer than the path length the relative\npositionOnLine will be used as fallback value.\n"}, "sources": [{"fileName": "edge.ts", "line": 44, "character": 26}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 166, "name": "PathPositionRotationAndScale.absolutePositionOnLine"}}, {"id": 1115, "name": "absoluteRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation angle in degree.", "text": "Absolute rotation overwrites any relative rotation.\n"}, "sources": [{"fileName": "rotation-vector.ts", "line": 35, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 170, "name": "PathPositionRotationAndScale.absoluteRotation"}}, {"id": 1111, "name": "clickEventKey", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A key used in a click event when the marker was clicked."}, "sources": [{"fileName": "marker.ts", "line": 41, "character": 17}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 1114, "name": "ignorePathDirectionForRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the relative rotation is applied as if the path always goes from left to right."}, "sources": [{"fileName": "edge.ts", "line": 50, "character": 34}], "type": {"type": "intrinsic", "name": "boolean"}, "inheritedFrom": {"type": "reference", "id": 169, "name": "PathPositionRotationAndScale.ignorePathDirectionForRotation"}}, {"id": 1104, "name": "isDynamicTemplate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True iff the link handle uses a dynamic template."}, "sources": [{"fileName": "marker.ts", "line": 28, "character": 21}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1112, "name": "positionOnLine", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The relative position of the path element on the edge (between 0 and 1). (Default `0` == 'start')"}, "sources": [{"fileName": "edge.ts", "line": 35, "character": 18}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "number"}, {"type": "literal", "value": "start"}, {"type": "literal", "value": "end"}]}, "inheritedFrom": {"type": "reference", "id": 165, "name": "PathPositionRotationAndScale.positionOnLine"}}, {"id": 1116, "name": "relativeRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Relative rotation angle in degree."}, "sources": [{"fileName": "rotation-vector.ts", "line": 37, "character": 20}], "type": {"type": "intrinsic", "name": "number"}, "inheritedFrom": {"type": "reference", "id": 171, "name": "PathPositionRotationAndScale.relativeRotation"}}, {"id": 1107, "name": "rotate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"tags": [{"tag": "deprecated", "text": "Rotation information for the marker. (Use `absoluteRotation` and `relativeRotation attributes instead!)"}]}, "sources": [{"fileName": "marker.ts", "line": 34, "character": 10}], "type": {"type": "reflection", "declaration": {"id": 1108, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "children": [{"id": 1109, "name": "normal", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation via direction vector."}, "sources": [{"fileName": "marker.ts", "line": 36, "character": 14}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}, {"id": 1110, "name": "relativeAngle", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Relative angle in degree."}, "sources": [{"fileName": "marker.ts", "line": 38, "character": 21}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1109, 1110]}]}}}, {"id": 1105, "name": "scale", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "A factor to scale the marker."}, "sources": [{"fileName": "marker.ts", "line": 30, "character": 9}], "type": {"type": "intrinsic", "name": "number"}, "overwrites": {"type": "reference", "id": 167, "name": "PathPositionRotationAndScale.scale"}}, {"id": 1106, "name": "scaleRelative", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "If true the marker and lineOffset is scaled relative to the stroke width."}, "sources": [{"fileName": "marker.ts", "line": 32, "character": 17}], "type": {"type": "intrinsic", "name": "boolean"}, "overwrites": {"type": "reference", "id": 168, "name": "PathPositionRotationAndScale.scaleRelative"}}, {"id": 1103, "name": "template", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "the marker template id to use for this marker."}, "sources": [{"fileName": "marker.ts", "line": 26, "character": 12}], "type": {"type": "intrinsic", "name": "string"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1113, 1115, 1111, 1114, 1104, 1112, 1116, 1107, 1105, 1106, 1103]}], "sources": [{"fileName": "marker.ts", "line": 24, "character": 23}], "extendedTypes": [{"type": "reference", "id": 164, "name": "PathPositionRotationAndScale"}], "extendedBy": [{"type": "reference", "id": 189, "name": "EdgeDragHandle"}]}], "groups": [{"title": "Classes", "kind": 128, "children": [1117]}, {"title": "Interfaces", "kind": 256, "children": [1102]}], "sources": [{"fileName": "marker.ts", "line": 1, "character": 0}]}, {"id": 1128, "name": "node", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1129, "name": "Node", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Node interface."}, "children": [{"id": 1134, "name": "dynamicTemplate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The id of the dynamic node template to use for this node."}, "sources": [{"fileName": "node.ts", "line": 34, "character": 19}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 1130, "name": "id", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Unique identifier."}, "sources": [{"fileName": "node.ts", "line": 26, "character": 6}], "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 1133, "name": "type", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Node type. Can be used for styling."}, "sources": [{"fileName": "node.ts", "line": 32, "character": 8}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 1131, "name": "x", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "X coordinate of Node(center)."}, "sources": [{"fileName": "node.ts", "line": 28, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1132, "name": "y", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Y coordinate of Node(center)."}, "sources": [{"fileName": "node.ts", "line": 30, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1134, 1130, 1133, 1131, 1132]}], "sources": [{"fileName": "node.ts", "line": 24, "character": 21}], "indexSignature": {"id": 1135, "name": "__index", "kind": 8192, "kindString": "Index signature", "flags": {}, "comment": {"shortText": "Node interface."}, "parameters": [{"id": 1136, "name": "prop", "kind": 32768, "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "any"}}}, {"id": 1137, "name": "NodeMovementInformation", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface storing all informatein needed when moving a node."}, "children": [{"id": 1139, "name": "children", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The affected children that need to move with the node."}, "sources": [{"fileName": "node.ts", "line": 45, "character": 12}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}], "name": "Set"}}, {"id": 1141, "name": "needsFullRender", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Flag, true if the next render should be a complete render instead of only updating positions. Reset after render."}, "sources": [{"fileName": "node.ts", "line": 49, "character": 19}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1138, "name": "node", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The node to be moved."}, "sources": [{"fileName": "node.ts", "line": 43, "character": 8}], "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1140, "name": "offset", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The initial offset from the movement start position to the node."}, "sources": [{"fileName": "node.ts", "line": 47, "character": 10}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1139, 1141, 1138, 1140]}], "sources": [{"fileName": "node.ts", "line": 41, "character": 40}]}], "groups": [{"title": "Interfaces", "kind": 256, "children": [1129, 1137]}], "sources": [{"fileName": "node.ts", "line": 1, "character": 0}]}, {"id": 1142, "name": "object-cache", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1143, "name": "GraphObjectCache", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "A cache for fast access of graph objects."}, "children": [{"id": 1144, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 1145, "name": "new GraphObjectCache", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 1143, "name": "GraphObjectCache"}}]}, {"id": 1149, "name": "edges", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "object-cache.ts", "line": 31, "character": 17}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 205, "name": "Edge"}], "name": "Map"}}, {"id": 1150, "name": "edgesBySource", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "object-cache.ts", "line": 32, "character": 25}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "typeArguments": [{"type": "reference", "id": 205, "name": "Edge"}], "name": "Set"}], "name": "Map"}}, {"id": 1151, "name": "edgesByTarget", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "object-cache.ts", "line": 33, "character": 25}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "typeArguments": [{"type": "reference", "id": 205, "name": "Edge"}], "name": "Set"}], "name": "Map"}}, {"id": 1147, "name": "nodeBBoxes", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "object-cache.ts", "line": 29, "character": 22}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 1468, "name": "Rect"}], "name": "Map"}}, {"id": 1148, "name": "nodeDropZones", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "object-cache.ts", "line": 30, "character": 25}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 11, "name": "NodeDropZone"}], "name": "Map"}], "name": "Map"}}, {"id": 1146, "name": "nodes", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "object-cache.ts", "line": 28, "character": 17}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 1129, "name": "Node"}], "name": "Map"}}, {"id": 1164, "name": "addEdgeToCache", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 111, "character": 18}], "signatures": [{"id": 1165, "name": "addEdgeToCache", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a new edge to the object cache without invalidating the whole cache."}, "parameters": [{"id": 1166, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new edge to add to the object cache\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1155, "name": "addNodeToCache", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 62, "character": 18}], "signatures": [{"id": 1156, "name": "addNodeToCache", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a node to the cache without invalidating the complete cache."}, "parameters": [{"id": 1157, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new node to add to the cache\n"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1184, "name": "getAllDropZones", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 183, "character": 19}], "signatures": [{"id": 1185, "name": "getAllDropZones", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get all dropzones of a node."}, "parameters": [{"id": 1186, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to get the dropzones for\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 11, "name": "NodeDropZone"}], "name": "Map"}}]}, {"id": 1187, "name": "getDropZone", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 193, "character": 15}], "signatures": [{"id": 1188, "name": "getDropZone", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get a specific dropzone of a node."}, "parameters": [{"id": 1189, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to get the dropzone for"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 1190, "name": "dropZoneId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the dropzones\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "id": 11, "name": "NodeDropZone"}}]}, {"id": 1191, "name": "getEdge", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 202, "character": 11}], "signatures": [{"id": 1192, "name": "getEdge", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get an edge by its id."}, "parameters": [{"id": 1193, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge id\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "id": 205, "name": "Edge"}}]}, {"id": 1197, "name": "getEdgesBySource", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 226, "character": 20}], "signatures": [{"id": 1198, "name": "getEdgesBySource", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get all edges with the same source.", "returns": "the set of edges with the same source\n"}, "parameters": [{"id": 1199, "name": "sourceId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the source node"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "id": 205, "name": "Edge"}], "name": "Set"}}]}, {"id": 1194, "name": "getEdgesByTarget", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 212, "character": 20}], "signatures": [{"id": 1195, "name": "getEdgesByTarget", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get all edges with the same target.", "returns": "the set of edges with the same target\n"}, "parameters": [{"id": 1196, "name": "targetId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "id of the target node"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "id": 205, "name": "Edge"}], "name": "Set"}}]}, {"id": 1170, "name": "getNode", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 145, "character": 11}], "signatures": [{"id": 1171, "name": "getNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the cached node."}, "parameters": [{"id": 1172, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "id": 1129, "name": "Node"}}]}, {"id": 1177, "name": "getNodeBBox", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 164, "character": 15}], "signatures": [{"id": 1178, "name": "getNodeBBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get a node bbox from the cache."}, "parameters": [{"id": 1179, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "reference", "id": 1468, "name": "Rect"}}]}, {"id": 1167, "name": "removeEdgeFromCache", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 132, "character": 23}], "signatures": [{"id": 1168, "name": "removeEdgeFromCache", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove an edge from the cache without invalidating the whole cache."}, "parameters": [{"id": 1169, "name": "edge", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the edge to remove from the object cache\n"}, "type": {"type": "reference", "id": 205, "name": "Edge"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1158, "name": "removeNodeFromCache", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 71, "character": 23}], "signatures": [{"id": 1159, "name": "removeNodeFromCache", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove a node from the cache without invalidating the complete cache."}, "parameters": [{"id": 1160, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the old node to remove from the cache\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1173, "name": "setNodeBBox", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 155, "character": 15}], "signatures": [{"id": 1174, "name": "setNodeBBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Store a bbox for a node in the cache."}, "parameters": [{"id": 1175, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id to store the bbox for"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 1176, "name": "bbox", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the bbox of the node\n"}, "type": {"type": "reference", "name": "DOMRect"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1180, "name": "setNodeDropZones", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 174, "character": 20}], "signatures": [{"id": 1181, "name": "setNodeDropZones", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Set new dropzone onformation for a node."}, "parameters": [{"id": 1182, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to update the dropzones for"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 1183, "name": "dropZones", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new dropzones\n"}, "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 11, "name": "NodeDropZone"}], "name": "Map"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1161, "name": "updateEdgeCache", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 82, "character": 19}], "signatures": [{"id": 1162, "name": "updateEdgeCache", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Invalidate all edge related caches."}, "parameters": [{"id": 1163, "name": "edges", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new edge list\n"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 205, "name": "Edge"}}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1152, "name": "updateNodeCache", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "object-cache.ts", "line": 49, "character": 19}], "signatures": [{"id": 1153, "name": "updateNodeCache", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Invalidate the node cache."}, "parameters": [{"id": 1154, "name": "nodes", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new node list\n"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1129, "name": "Node"}}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [1144]}, {"title": "Properties", "kind": 1024, "children": [1149, 1150, 1151, 1147, 1148, 1146]}, {"title": "Methods", "kind": 2048, "children": [1164, 1155, 1184, 1187, 1191, 1197, 1194, 1170, 1177, 1167, 1158, 1173, 1180, 1161, 1152]}], "sources": [{"fileName": "object-cache.ts", "line": 26, "character": 29}]}], "groups": [{"title": "Classes", "kind": 128, "children": [1143]}], "sources": [{"fileName": "object-cache.ts", "line": 1, "character": 0}]}, {"id": 1200, "name": "resizing", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1220, "name": "DefaultResizeStrategy", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "The default resize strategy.", "text": "This strategy uses `node.width` and `node.height`.\n"}, "children": [{"id": 1221, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 1222, "name": "new DefaultResizeStrategy", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 1220, "name": "DefaultResizeStrategy"}}]}, {"id": 1223, "name": "applyNewDimensions", "kind": 2048, "kindString": "Method", "flags": {}, "comment": {"shortText": "Apply the new width/height dimensions to the given node.", "text": "This method is called before `fitIntoBoundingBox`.\n"}, "sources": [{"fileName": "resizing.ts", "line": 97, "character": 22}], "signatures": [{"id": 1224, "name": "applyNewDimensions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Apply the new width/height dimensions to the given node.", "text": "This method is called before `fitIntoBoundingBox`.\n", "tags": [{"tag": "override", "text": "\n\nThe width and height are set as `node.width` and `node.height`.\n"}]}, "parameters": [{"id": 1225, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node to apply the dimensions to"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1226, "name": "width", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"shortText": "the new height of the bounding box of the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1227, "name": "height", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1228, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor instance\n"}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "intrinsic", "name": "void"}, "implementationOf": {"type": "reference", "name": "ResizeStrategy.applyNewDimensions"}}], "implementationOf": {"type": "reference", "id": 1207, "name": "ResizeStrategy.applyNewDimensions"}}, {"id": 1229, "name": "fitIntoBoundingBox", "kind": 2048, "kindString": "Method", "flags": {}, "comment": {"shortText": "Fit the given node into the given bounding box.", "text": "This method is called after `applyNewDimensions`.\n\nThe given bounding box has the same width and height that are used in the\ncall of the `applyNewDimensions` method.\n\nIf the center of the new bounding box is not (0,0) then the node should be moved\nsuch that the resulting bounding box of the node is again centered around (0,0)\nrelative to the node.\n"}, "sources": [{"fileName": "resizing.ts", "line": 118, "character": 22}], "signatures": [{"id": 1230, "name": "fitIntoBoundingBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Fit the given node into the given bounding box.", "text": "This method is called after `applyNewDimensions`.\n\nThe given bounding box has the same width and height that are used in the\ncall of the `applyNewDimensions` method.\n\nIf the center of the new bounding box is not (0,0) then the node should be moved\nsuch that the resulting bounding box of the node is again centered around (0,0)\nrelative to the node.\n", "tags": [{"tag": "override", "text": "\n\nThe node position is first adjusted such that the center of the new bounding\nbox of the node is at the node coordinates.\n\nThen the node is moved to that location with the `GraphEditor.moveNode`\nmethod to run all movement logic without changing child node positions.\n\nThis ensures that child nodes that have a fixed position or a drop zone\nstill get moved to the correct position.\n"}]}, "parameters": [{"id": 1231, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node to apply the dimensions to"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1232, "name": "rect", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new bounding box (relative to the node) the node should fit into"}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 1233, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the grapheditor instance\n"}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "intrinsic", "name": "void"}, "implementationOf": {"type": "reference", "name": "ResizeStrategy.fitIntoBoundingBox"}}], "implementationOf": {"type": "reference", "id": 1214, "name": "ResizeStrategy.fitIntoBoundingBox"}}], "groups": [{"title": "Constructors", "kind": 512, "children": [1221]}, {"title": "Methods", "kind": 2048, "children": [1223, 1229]}], "sources": [{"fileName": "resizing.ts", "line": 85, "character": 34}], "implementedTypes": [{"type": "reference", "id": 1201, "name": "ResizeStrategy"}]}, {"id": 1254, "name": "ResizingManager", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "A class to add interactive node resizing to a grapheditor instance.", "text": "_Usage:_\n\nInitialize a new ResizingManager for a grapheditor instance.\n\n`const resizeingManager = new ResizeingManager(grapheditor);`\n\nShow the resize overlay for a Node\n\n`resizeingManager.showResizeOverlay(node.id);`\n\nOR resize Node via api.\n\n`resizeingManager.resizeNode(node.id, newWidth, newHeight);`\n\nFor cleanup call `resizeingManager.unlink()`!\n"}, "children": [{"id": 1255, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 1256, "name": "new ResizingManager", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "parameters": [{"id": 1257, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "reference", "id": 1254, "name": "ResizingManager"}}]}, {"id": 1264, "name": "currentlyResizing", "kind": 1024, "kindString": "Property", "flags": {"isProtected": true}, "comment": {"shortText": "The current dimensions of the nodes beeing resized."}, "sources": [{"fileName": "resizing.ts", "line": 389, "character": 31}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 1468, "name": "Rect"}], "name": "Map"}, "defaultValue": "..."}, {"id": 1258, "name": "graphEditor", "kind": 1024, "kindString": "Property", "flags": {"isReadonly": true}, "comment": {"shortText": "The grapheditor instance this object is bound to."}, "sources": [{"fileName": "resizing.ts", "line": 372, "character": 24}], "type": {"type": "reference", "id": 243, "name": "default"}}, {"id": 1261, "name": "nodePositionChange", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "comment": {"shortText": "Subscription to the 'nodepositionchange' events of the grapheditor."}, "sources": [{"fileName": "resizing.ts", "line": 380, "character": 30}], "type": {"type": "intrinsic", "name": "any"}}, {"id": 1262, "name": "overlayGroup", "kind": 1024, "kindString": "Property", "flags": {"isProtected": true}, "comment": {"shortText": "The selection of the group layer containing all resize overlays."}, "sources": [{"fileName": "resizing.ts", "line": 384, "character": 26}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 1263, "name": "resizeOptions", "kind": 1024, "kindString": "Property", "flags": {"isProtected": true}, "comment": {"shortText": "The currently active resize overlays by node id with resize options."}, "sources": [{"fileName": "resizing.ts", "line": 387, "character": 27}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 1234, "name": "ResizeOverlayOptions"}], "name": "Map"}, "defaultValue": "..."}, {"id": 1265, "name": "resizeOverlays", "kind": 1024, "kindString": "Property", "flags": {"isProtected": true}, "comment": {"shortText": "A list of nodeId's with active resize overlays for efficient d3 joins."}, "sources": [{"fileName": "resizing.ts", "line": 392, "character": 28}], "type": {"type": "array", "elementType": {"type": "intrinsic", "name": "string"}}, "defaultValue": "[]"}, {"id": 1259, "name": "resizeStrategies", "kind": 1024, "kindString": "Property", "flags": {"isReadonly": true}, "comment": {"shortText": "The map containing all resize strategies to be used for resizing nodes."}, "sources": [{"fileName": "resizing.ts", "line": 374, "character": 29}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 1201, "name": "ResizeStrategy"}], "name": "Map"}, "defaultValue": "..."}, {"id": 1260, "name": "svgChange", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "comment": {"shortText": "Subscription to the 'svginitialized' events of the grapheditor."}, "sources": [{"fileName": "resizing.ts", "line": 378, "character": 21}], "type": {"type": "intrinsic", "name": "any"}}, {"id": 1311, "name": "_resizeNode", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "resizing.ts", "line": 807, "character": 25}], "signatures": [{"id": 1312, "name": "_resizeNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Resize a node to fit into the given bounding box.", "returns": "a vector of how much the node center was moved for the resize\n"}, "parameters": [{"id": 1313, "name": "resizeStrategy", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the resize strategy to use to resize the node"}, "type": {"type": "reference", "id": 1201, "name": "ResizeStrategy"}}, {"id": 1314, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node to resize"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1315, "name": "newRect", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new dimesnions to fit the node into"}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 1316, "name": "updateGrapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if `true`, do a complete render of the grapheditor after the resize"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "true"}, {"id": 1317, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source of the resize event to be fired"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}]}, {"id": 1318, "name": "dispatchNodeResizeEvent", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 851, "character": 34}], "signatures": [{"id": 1319, "name": "dispatchNodeResizeEvent", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Dispatch a 'noderesize' event on the grapheditor instance."}, "parameters": [{"id": 1320, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node that was resized"}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1321, "name": "newBBox", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new bounding box of the node"}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 1322, "name": "oldBBox", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the old bounding box of the node"}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 1323, "name": "eventSource", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the source of the event (default EventSource.API)\n"}, "type": {"type": "reference", "id": 239, "name": "EventSource"}, "defaultValue": "..."}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1275, "name": "hideResizeOverlay", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 485, "character": 28}], "signatures": [{"id": 1276, "name": "hideResizeOverlay", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Hide a visible resize overlay.", "text": "This method will completely remove the resize overlay from the dom and\ndiscard the resize options associated with that resize overlay.\n\nThis method will quietly return if the resize overlay is not visible for\nthe requested node id.\n"}, "parameters": [{"id": 1277, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id for which to hide the resize overlay\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1268, "name": "initializeGraph", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "resizing.ts", "line": 428, "character": 29}], "signatures": [{"id": 1269, "name": "initializeGraph", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Initialize the svg and add a layer for displaying resize-overlays.", "text": "The rsize overlay group will always be raised to the top of the zoom group stack!\n"}, "parameters": [{"id": 1270, "name": "graph", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the zoom group selection of the active svg of the grapheditor instance\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1278, "name": "isResizeOverlayVisible", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 502, "character": 33}], "signatures": [{"id": 1279, "name": "isResizeOverlayVisible", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Check if the resize overlay is currently visible for the given node id."}, "parameters": [{"id": 1280, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id to check\n"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}], "type": {"type": "intrinsic", "name": "boolean"}}]}, {"id": 1324, "name": "resizeHandlerFromHandle", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "resizing.ts", "line": 880, "character": 37}], "signatures": [{"id": 1325, "name": "resizeHandlerFromHandle", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get a resize handler that maps resize handle movement to bounding box resizes.", "text": "The handler respects the options defined in the ResizeOverlayOptions that\nconstrain the resizing operations.\n"}, "parameters": [{"id": 1326, "name": "options", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the resize options for the resize overlay"}, "type": {"type": "reference", "id": 1234, "name": "ResizeOverlayOptions"}}, {"id": 1327, "name": "handle", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the handle of the resize overlay that is dragged by the user\n"}, "type": {"type": "reference", "name": "ResizeHandle"}}], "type": {"type": "reference", "name": "ResizeHandler"}}]}, {"id": 1298, "name": "resizeNode", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 736, "character": 21}], "signatures": [{"id": 1299, "name": "resizeNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Resize a node to the given dimensions.", "text": "Equivalent to `resizeNodeToBBox(nodeId, {x: - (width / 2), y: - (height / 2), width: width, height: height}, resizeStrategy)`.\n"}, "parameters": [{"id": 1300, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to resize"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 1301, "name": "width", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new width of the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1302, "name": "height", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new height of the node"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1303, "name": "resizeStrategy", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the resize strategy to use (defaults to 'default' if null or undefined)"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1304, "name": "updateGrapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if `true`, do a complete render of the grapheditor after the resize (see `resizeNodeToBBox`) (default: `true`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "true"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1305, "name": "resizeNodeToBBox", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 767, "character": 27}], "signatures": [{"id": 1306, "name": "resizeNodeToBBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Resize the node to fit into the given dimensions.", "text": "The dimensions are given as a bounding box relative to the node coordinates.\n\nFor batch resizing many nodes in one go it is possible to set `updateGrapheditor` to `false`.\nThis will prevent any updates to be visible until `graphEditor.completeRender()` is\ncalled manually.\nThe resize overlays also need to be updated manually if `updateGrapheditor` is `false`.\nTo update the overlays make sure to call `updateOverlays` __after__\n`graphEditor.completeRender()` to ensure that the bounding boxes are up to date.\n\nIf `updateGrapheditor` is set to `false` the 'noderesize' event will still be fired.\nBut becouse the actual bounding box of the node is not updated as the graph\nis not rerendered the new bounding box is guessed from the `dimensions` rect.\n"}, "parameters": [{"id": 1307, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the node to resize"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 1308, "name": "dimensions", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the bounding box relative to the node position to which to fit the node into"}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 1309, "name": "resizeStrategy", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the resize strategy to use (defaults to 'default' if null or undefined)"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1310, "name": "updateGrapheditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if `true`, do a complete render of the grapheditor after the resize (default: `true`)\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "true"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1271, "name": "showResizeOverlay", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 447, "character": 28}], "signatures": [{"id": 1272, "name": "showResizeOverlay", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Show a resize overlay with the given options for the given node.", "text": "This method will quietly return without changing the resize options\nif the overlay is already visible!\n"}, "parameters": [{"id": 1273, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id to select the node that should be resized"}, "type": {"type": "union", "types": [{"type": "intrinsic", "name": "string"}, {"type": "intrinsic", "name": "number"}]}}, {"id": 1274, "name": "options", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "the options object for the resize overlay\n"}, "type": {"type": "reference", "id": 1234, "name": "ResizeOverlayOptions"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1266, "name": "unlink", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 416, "character": 17}], "signatures": [{"id": 1267, "name": "unlink", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Unsubscribe all event subscriptions of this object on the grapheditor instance."}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1283, "name": "updateOverlay", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "resizing.ts", "line": 538, "character": 27}], "signatures": [{"id": 1284, "name": "updateOverlay", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update the content of a single resize overlay.", "text": "Also set drag behaviour for resize handles.\n"}, "parameters": [{"id": 1285, "name": "overlaySelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the selection of a single resize overlay to update"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 1286, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id for that selection\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1287, "name": "updateOverlayDimensions", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "resizing.ts", "line": 675, "character": 37}], "signatures": [{"id": 1288, "name": "updateOverlayDimensions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update only the dimensions of a single resize overlay."}, "parameters": [{"id": 1289, "name": "overlaySelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the selection of a single resize overlay"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "string"}, {"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 1290, "name": "nodeId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the node id for that selection"}, "type": {"type": "intrinsic", "name": "any"}}, {"id": 1291, "name": "resizeHandles", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the resize handle list for that selection (must have the right dimensions)\n"}, "type": {"type": "array", "elementType": {"type": "reference", "name": "ResizeHandle"}}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1295, "name": "updateOverlayPositions", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "resizing.ts", "line": 717, "character": 36}], "signatures": [{"id": 1296, "name": "updateOverlayPositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update the positions of the resize overlays."}, "parameters": [{"id": 1297, "name": "overlaySelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a selection of resize overlays\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "string"}, {"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1281, "name": "updateOverlays", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "resizing.ts", "line": 511, "character": 25}], "signatures": [{"id": 1282, "name": "updateOverlays", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update all resize overlays including positions.", "text": "Use this method to update the resize overlay manually if needed.\n"}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1292, "name": "updateResizeHandlePositions", "kind": 2048, "kindString": "Method", "flags": {"isProtected": true}, "sources": [{"fileName": "resizing.ts", "line": 699, "character": 41}], "signatures": [{"id": 1293, "name": "updateResizeHandlePositions", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update the relative positions of the resize handles in the resize overlay."}, "parameters": [{"id": 1294, "name": "handleSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the selection of all resize handles of a resize overlay\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "reference", "name": "ResizeHandle"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [1255]}, {"title": "Properties", "kind": 1024, "children": [1264, 1258, 1261, 1262, 1263, 1265, 1259, 1260]}, {"title": "Methods", "kind": 2048, "children": [1311, 1318, 1275, 1268, 1278, 1324, 1298, 1305, 1271, 1266, 1283, 1287, 1295, 1281, 1292]}], "sources": [{"fileName": "resizing.ts", "line": 369, "character": 28}]}, {"id": 1234, "name": "ResizeOverlayOptions", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Options for the resize overlay to control appeareance and behaviour."}, "children": [{"id": 1236, "name": "cornerHandleTemplate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The id of a static marker template to use for corner resize handles. (Overwrites `handleTemplate` for corner handles)"}, "sources": [{"fileName": "resizing.ts", "line": 134, "character": 24}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 1235, "name": "handleTemplate", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The id of a static marker template to use for all resize handles."}, "sources": [{"fileName": "resizing.ts", "line": 132, "character": 18}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 1249, "name": "liveResize", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if the node is resized while dragging. If unset or `false` the node is only resized after the resize overlay is not dragged anymore."}, "sources": [{"fileName": "resizing.ts", "line": 161, "character": 14}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1253, "name": "maxHeight", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The maximal height of the node. Must be `>= minHeight`. Set this to `minHeight` to disable vertical resizing."}, "sources": [{"fileName": "resizing.ts", "line": 170, "character": 13}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1252, "name": "maxWidth", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The maximal width of the node. Must be `>= minWidth`. Set this to `minWidth` to disable horizontal resizing."}, "sources": [{"fileName": "resizing.ts", "line": 168, "character": 12}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1251, "name": "minHeight", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The minimal height of the node. Must be `> 0`."}, "sources": [{"fileName": "resizing.ts", "line": 166, "character": 13}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1250, "name": "minWidth", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The minimal width of the node. Must be `> 0`."}, "sources": [{"fileName": "resizing.ts", "line": 164, "character": 12}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1242, "name": "noCornerHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if the overlay should not have handles in the corners."}, "sources": [{"fileName": "resizing.ts", "line": 146, "character": 19}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1240, "name": "noHorizontalHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if the overlay should not have handles for horizontal resizing (left and right)."}, "sources": [{"fileName": "resizing.ts", "line": 142, "character": 23}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1241, "name": "noVerticalHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if the overlay should not have handles for vertical resizing (top and bottom)."}, "sources": [{"fileName": "resizing.ts", "line": 144, "character": 21}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1244, "name": "preserveRatio", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if all resizing handles should preserve the aspect ratio of the node."}, "sources": [{"fileName": "resizing.ts", "line": 151, "character": 17}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1245, "name": "preserveRatioOnDiagonals", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if corner resizing handles should preserve the aspect ratio of the node."}, "sources": [{"fileName": "resizing.ts", "line": 153, "character": 28}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1243, "name": "resizeStrategy", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "The name of the strategy that is used to resize the node when the resize overlay changes."}, "sources": [{"fileName": "resizing.ts", "line": 149, "character": 18}], "type": {"type": "intrinsic", "name": "string"}}, {"id": 1239, "name": "rotateCornerHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if handles on the corners of the rectangle overlay should be rotated. (see `rotateHandles`)"}, "sources": [{"fileName": "resizing.ts", "line": 140, "character": 23}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1238, "name": "rotateEdgeHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if handles on the edges of the rectangle overlay should be rotated. (see `rotateHandles`)"}, "sources": [{"fileName": "resizing.ts", "line": 138, "character": 21}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1237, "name": "rotateHandles", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if all handles should be rotated. (Handles are rotated such that the upward facing side is facing out of the rectangle overlay)"}, "sources": [{"fileName": "resizing.ts", "line": 136, "character": 17}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1246, "name": "symmetric", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if all resizing operations are mirrored at the center of the resize overlay."}, "sources": [{"fileName": "resizing.ts", "line": 155, "character": 13}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1247, "name": "symmetricHorizontal", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if the horizontal part of all resizing operations is mirrored at the center of the resize overlay."}, "sources": [{"fileName": "resizing.ts", "line": 157, "character": 23}], "type": {"type": "intrinsic", "name": "boolean"}}, {"id": 1248, "name": "symmetricVertical", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "True if the vertical part of all resizing operations is mirrored at the center of the resize overlay."}, "sources": [{"fileName": "resizing.ts", "line": 159, "character": 21}], "type": {"type": "intrinsic", "name": "boolean"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1236, 1235, 1249, 1253, 1252, 1251, 1250, 1242, 1240, 1241, 1244, 1245, 1243, 1239, 1238, 1237, 1246, 1247, 1248]}], "sources": [{"fileName": "resizing.ts", "line": 130, "character": 37}]}, {"id": 1201, "name": "ResizeStrategy", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "A strategy to apply the new dimensions to a node when a resize happens."}, "children": [{"id": 1207, "name": "applyNewDimensions", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Apply the new width/height dimensions to the given node.", "text": "This method is called before `fitIntoBoundingBox`.\n", "tags": [{"tag": "param", "text": "the node to apply the dimensions to", "param": "node"}, {"tag": "param", "text": "the new width of the bounding box of the node", "param": "width"}, {"tag": "param", "text": "the new height of the bounding box of the node", "param": "width"}, {"tag": "param", "text": "the grapheditor instance\n", "param": "graphEditor"}]}, "sources": [{"fileName": "resizing.ts", "line": 59, "character": 22}], "type": {"type": "reflection", "declaration": {"id": 1208, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 1209, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 1210, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1211, "name": "width", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1212, "name": "height", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1213, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "intrinsic", "name": "void"}}]}}}, {"id": 1214, "name": "fitIntoBoundingBox", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "Fit the given node into the given bounding box.", "text": "This method is called after `applyNewDimensions`.\n\nThe given bounding box has the same width and height that are used in the\ncall of the `applyNewDimensions` method.\n\nIf the center of the new bounding box is not (0,0) then the node should be moved\nsuch that the resulting bounding box of the node is again centered around (0,0)\nrelative to the node.\n", "tags": [{"tag": "param", "text": "the node to apply the dimensions to", "param": "node"}, {"tag": "param", "text": "the new bounding box (relative to the node) the node should fit into", "param": "rect"}, {"tag": "param", "text": "the grapheditor instance\n", "param": "graphEditor"}]}, "sources": [{"fileName": "resizing.ts", "line": 77, "character": 22}], "type": {"type": "reflection", "declaration": {"id": 1215, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 1216, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 1217, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1218, "name": "rect", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1468, "name": "Rect"}}, {"id": 1219, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "intrinsic", "name": "void"}}]}}}, {"id": 1202, "name": "getNodeDimensions", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Get the current dimensions of a node.", "text": "If this method is not implemented or fails to return a Rect the\nbounding box of the node is fetched from the graphEditor.\n\nThis method only needs to be implemented if the svg bounding box is\nnot accurate in representing the actual node dimensions. This can happen\nwith odd shapes, visible link handles that are included in the bounding box\nor rotated nodes.\n", "tags": [{"tag": "param", "text": "the node to get the dimensions of", "param": "node"}, {"tag": "param", "text": "the grapheditor instance", "param": "graphEditor"}, {"tag": "param", "text": "the bounding box of the node\n", "param": "returns"}]}, "sources": [{"fileName": "resizing.ts", "line": 47, "character": 21}], "type": {"type": "reflection", "declaration": {"id": 1203, "name": "__type", "kind": 65536, "kindString": "Type literal", "flags": {}, "signatures": [{"id": 1204, "name": "__type", "kind": 4096, "kindString": "Call signature", "flags": {}, "parameters": [{"id": 1205, "name": "node", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 1129, "name": "Node"}}, {"id": 1206, "name": "graphEditor", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "reference", "id": 243, "name": "default"}}], "type": {"type": "reference", "id": 1468, "name": "Rect"}}]}}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1207, 1214, 1202]}], "sources": [{"fileName": "resizing.ts", "line": 30, "character": 31}], "implementedBy": [{"type": "reference", "id": 1220, "name": "DefaultResizeStrategy"}]}], "groups": [{"title": "Classes", "kind": 128, "children": [1220, 1254]}, {"title": "Interfaces", "kind": 256, "children": [1234, 1201]}], "sources": [{"fileName": "resizing.ts", "line": 1, "character": 0}]}, {"id": 1328, "name": "rotation-vector", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1345, "name": "RotationData", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface holding rotation information of a graph object."}, "children": [{"id": 1346, "name": "absoluteRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Absolute rotation angle in degree.", "text": "Absolute rotation overwrites any relative rotation.\n"}, "sources": [{"fileName": "rotation-vector.ts", "line": 35, "character": 20}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1347, "name": "relativeRotation", "kind": 1024, "kindString": "Property", "flags": {"isOptional": true}, "comment": {"shortText": "Relative rotation angle in degree."}, "sources": [{"fileName": "rotation-vector.ts", "line": 37, "character": 20}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1346, 1347]}], "sources": [{"fileName": "rotation-vector.ts", "line": 29, "character": 29}], "extendedBy": [{"type": "reference", "id": 164, "name": "PathPositionRotationAndScale"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}]}, {"id": 1342, "name": "RotationVector", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Vector used for angles and offsets."}, "children": [{"id": 1343, "name": "dx", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "rotation-vector.ts", "line": 22, "character": 6}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1344, "name": "dy", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "rotation-vector.ts", "line": 23, "character": 6}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1343, 1344]}], "sources": [{"fileName": "rotation-vector.ts", "line": 21, "character": 31}]}, {"id": 1338, "name": "angleToVector", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "rotation-vector.ts", "line": 89, "character": 29}], "signatures": [{"id": 1339, "name": "angleToVector", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate a rotation vector from an angle in degree and a length."}, "parameters": [{"id": 1340, "name": "angle", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "in degree"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1341, "name": "length", "kind": 32768, "kindString": "Parameter", "flags": {"isOptional": true}, "comment": {"text": "length of the vector (defaults to 1)\n"}, "type": {"type": "intrinsic", "name": "number"}}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}]}, {"id": 1335, "name": "calculateAngle", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "rotation-vector.ts", "line": 73, "character": 30}], "signatures": [{"id": 1336, "name": "calculateAngle", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the Angle of a rotation vector in degree."}, "parameters": [{"id": 1337, "name": "vector", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "vector to normalize\n"}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 1329, "name": "calculateLength", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "rotation-vector.ts", "line": 45, "character": 31}], "signatures": [{"id": 1330, "name": "calculateLength", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the absolute length of the given vector."}, "parameters": [{"id": 1331, "name": "vector", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "vector to calculate length of\n"}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "type": {"type": "intrinsic", "name": "number"}}]}, {"id": 1332, "name": "normalizeVector", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "rotation-vector.ts", "line": 57, "character": 31}], "signatures": [{"id": 1333, "name": "normalizeVector", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Normalize an existing vector to length 1."}, "parameters": [{"id": 1334, "name": "vector", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "vector to normalize\n"}, "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}], "type": {"type": "reference", "id": 1342, "name": "RotationVector"}}]}], "groups": [{"title": "Interfaces", "kind": 256, "children": [1345, 1342]}, {"title": "Functions", "kind": 64, "children": [1338, 1335, 1329, 1332]}], "sources": [{"fileName": "rotation-vector.ts", "line": 1, "character": 0}]}, {"id": 1348, "name": "templating", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1397, "name": "DynymicTemplateRegistry", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Template registry for dynamic templates.", "text": "The current instance can be retrieved from the GraphEditor object.\n"}, "children": [{"id": 1398, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 1399, "name": "new DynymicTemplateRegistry", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 1397, "name": "DynymicTemplateRegistry"}}]}, {"id": 1400, "name": "templates", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "templating.ts", "line": 296, "character": 21}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 23, "typeArguments": [{"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 172, "name": "TextComponent"}]}], "name": "DynamicTemplate"}], "name": "Map"}}, {"id": 1403, "name": "addDynamicTemplate", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "templating.ts", "line": 317, "character": 29}], "signatures": [{"id": 1404, "name": "addDynamicTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a new dynamic template to the registry.", "text": "The registry does not ensure type safety for templates on get!\n"}, "parameters": [{"id": 1405, "name": "templateId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id of the new template"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1406, "name": "template", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new dynamic template (`null` will remove the template with `templateId`)\n"}, "type": {"type": "reference", "id": 23, "typeArguments": [{"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 172, "name": "TextComponent"}]}], "name": "DynamicTemplate"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1401, "name": "clearAllTemplates", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "templating.ts", "line": 305, "character": 28}], "signatures": [{"id": 1402, "name": "clearAllTemplates", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Clears all dynamic templates (including any default templates)."}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1407, "name": "getDynamicTemplate", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "templating.ts", "line": 335, "character": 29}], "signatures": [{"id": 1408, "name": "getDynamicTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get a dynamic template from the registry.", "text": "The registry does not ensure type safety for templates on get!\n"}, "typeParameter": [{"id": 1409, "name": "T", "kind": 131072, "kindString": "Type parameter", "flags": {}, "type": {"type": "reference", "id": 23, "typeArguments": [{"type": "union", "types": [{"type": "reference", "id": 1129, "name": "Node"}, {"type": "reference", "id": 1092, "name": "LinkHandle"}, {"type": "reference", "id": 1102, "name": "Marker"}, {"type": "reference", "id": 172, "name": "TextComponent"}]}, {"type": "reference", "name": "T"}], "name": "DynamicTemplate"}}], "parameters": [{"id": 1410, "name": "templateId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template id\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "name": "T"}}]}, {"id": 1411, "name": "removeDynamicTemplate", "kind": 2048, "kindString": "Method", "flags": {"isPublic": true}, "sources": [{"fileName": "templating.ts", "line": 344, "character": 32}], "signatures": [{"id": 1412, "name": "removeDynamicTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove a dynamic template from the registry."}, "parameters": [{"id": 1413, "name": "templateId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template id\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [1398]}, {"title": "Properties", "kind": 1024, "children": [1400]}, {"title": "Methods", "kind": 2048, "children": [1403, 1401, 1407, 1411]}], "sources": [{"fileName": "templating.ts", "line": 294, "character": 36}]}, {"id": 1349, "name": "EdgePathGeneratorRegistry", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Registry for edge path generators.", "text": "The current instance can be retrieved from the GraphEditor object.\n"}, "children": [{"id": 1350, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 1351, "name": "new EdgePathGeneratorRegistry", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 1349, "name": "EdgePathGeneratorRegistry"}}]}, {"id": 1352, "name": "pathGenerators", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "templating.ts", "line": 34, "character": 26}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 99, "name": "EdgePathGenerator"}], "name": "Map"}}, {"id": 1355, "name": "addEdgePathGenerator", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 53, "character": 24}], "signatures": [{"id": 1356, "name": "addEdgePathGenerator", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Add a new path generator to the registry."}, "parameters": [{"id": 1357, "name": "pathGeneratorId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the key to register the path generator with"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1358, "name": "pathGenerator", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the path generator to register (`null` will remove the path generator with `pathGeneratorId`)\n"}, "type": {"type": "reference", "id": 99, "name": "EdgePathGenerator"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1353, "name": "clearAllPathGenerators", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 43, "character": 26}], "signatures": [{"id": 1354, "name": "clearAllPathGenerators", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Clears all path generators (including the default path generator)."}, "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1362, "name": "getEdgePathGenerator", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 79, "character": 24}], "signatures": [{"id": 1363, "name": "getEdgePathGenerator", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the edge path generator.", "text": "If the id was not found the id 'default' will be used instead."}, "parameters": [{"id": 1364, "name": "pathGeneratorId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id to retrieve\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "id": 99, "name": "EdgePathGenerator"}}]}, {"id": 1359, "name": "removePathGenerator", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 69, "character": 23}], "signatures": [{"id": 1360, "name": "removePathGenerator", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove a registered path generator."}, "parameters": [{"id": 1361, "name": "pathGeneratorId", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the id to remove\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [1350]}, {"title": "Properties", "kind": 1024, "children": [1352]}, {"title": "Methods", "kind": 2048, "children": [1355, 1353, 1362, 1359]}], "sources": [{"fileName": "templating.ts", "line": 32, "character": 38}]}, {"id": 1365, "name": "StaticTemplateRegistry", "kind": 128, "kindString": "Class", "flags": {}, "comment": {"shortText": "Template registry for static templates.", "text": "The current instance can be retrieved from the GraphEditor object.\n"}, "children": [{"id": 1366, "name": "constructor", "kind": 512, "kindString": "Constructor", "flags": {}, "signatures": [{"id": 1367, "name": "new StaticTemplateRegistry", "kind": 16384, "kindString": "Constructor signature", "flags": {}, "type": {"type": "reference", "id": 1365, "name": "StaticTemplateRegistry"}}]}, {"id": 1371, "name": "markerTemplateLineAttachements", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "templating.ts", "line": 97, "character": 42}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 1117, "name": "LineAttachementInfo"}], "name": "Map"}}, {"id": 1370, "name": "markerTemplates", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "templating.ts", "line": 96, "character": 27}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}], "name": "Map"}}, {"id": 1369, "name": "nodeTemplateLinkHandles", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "templating.ts", "line": 95, "character": 35}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}], "name": "Map"}}, {"id": 1368, "name": "nodeTemplates", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "templating.ts", "line": 94, "character": 25}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}], "name": "Map"}}, {"id": 1372, "name": "templateBBoxes", "kind": 1024, "kindString": "Property", "flags": {"isPrivate": true}, "sources": [{"fileName": "templating.ts", "line": 98, "character": 26}], "type": {"type": "reference", "typeArguments": [{"type": "intrinsic", "name": "string"}, {"type": "reference", "id": 1468, "name": "Rect"}], "name": "Map"}}, {"id": 1394, "name": "getMarkerAttachementPointInfo", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 283, "character": 33}], "signatures": [{"id": 1395, "name": "getMarkerAttachementPointInfo", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the line attachement point for the given marker type.", "text": "This method uses `getMarkerTemplateId`."}, "parameters": [{"id": 1396, "name": "markerType", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "id": 1117, "name": "LineAttachementInfo"}}]}, {"id": 1391, "name": "getMarkerTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 273, "character": 21}], "signatures": [{"id": 1392, "name": "getMarkerTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the static template for the given marker type.", "text": "This method uses `getMarkerTemplateId`."}, "parameters": [{"id": 1393, "name": "markerType", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}]}, {"id": 1388, "name": "getMarkerTemplateId", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 259, "character": 23}], "signatures": [{"id": 1389, "name": "getMarkerTemplateId", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the template id for the given marker type.", "text": "If the type is null or has no registered template the id `'default-marker'` is returned instead.\n"}, "parameters": [{"id": 1390, "name": "markerType", "kind": 32768, "kindString": "Parameter", "flags": {}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 1382, "name": "getNodeTemplate", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 234, "character": 19}], "signatures": [{"id": 1383, "name": "getNodeTemplate", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the static template for the given node type.", "text": "This method uses `getNodeTemplateId`."}, "parameters": [{"id": 1384, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template id (normally the node type)\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGGElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}]}, {"id": 1379, "name": "getNodeTemplateId", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 220, "character": 21}], "signatures": [{"id": 1380, "name": "getNodeTemplateId", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the template id for the given node type.", "text": "If the type is null or has no registered template the id `'default'` is returned instead.\n"}, "parameters": [{"id": 1381, "name": "nodeType", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the type of the node\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 1385, "name": "getNodeTemplateLinkHandles", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 244, "character": 30}], "signatures": [{"id": 1386, "name": "getNodeTemplateLinkHandles", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the link handles for the given node type.", "text": "This method uses `getNodeTemplateId`."}, "parameters": [{"id": 1387, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template id (normally the node type)\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "array", "elementType": {"type": "reference", "id": 1092, "name": "LinkHandle"}}}]}, {"id": 1376, "name": "getTemplateBBox", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 209, "character": 19}], "signatures": [{"id": 1377, "name": "getTemplateBBox", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Get the bounding box of a static template (without link handles!)."}, "parameters": [{"id": 1378, "name": "id", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the template id\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "reference", "id": 1468, "name": "Rect"}}]}, {"id": 1373, "name": "updateTemplateCache", "kind": 2048, "kindString": "Method", "flags": {}, "sources": [{"fileName": "templating.ts", "line": 115, "character": 23}], "signatures": [{"id": 1374, "name": "updateTemplateCache", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Update template cache from the given svg.", "text": "This method searches for templates in the first `<defs>` element of the given svg.\n"}, "parameters": [{"id": 1375, "name": "svg", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the svg to search for templates\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGSVGElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Constructors", "kind": 512, "children": [1366]}, {"title": "Properties", "kind": 1024, "children": [1371, 1370, 1369, 1368, 1372]}, {"title": "Methods", "kind": 2048, "children": [1394, 1391, 1388, 1382, 1379, 1385, 1376, 1373]}], "sources": [{"fileName": "templating.ts", "line": 92, "character": 35}]}], "groups": [{"title": "Classes", "kind": 128, "children": [1397, 1349, 1365]}], "sources": [{"fileName": "templating.ts", "line": 1, "character": 0}]}, {"id": 1414, "name": "textwrap", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1441, "name": "calculateMultiline", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 278, "character": 34}], "signatures": [{"id": 1442, "name": "calculateMultiline", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate and create a multiline span group."}, "parameters": [{"id": 1443, "name": "text", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "parent text element"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGTextElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "literal", "value": null}, {"type": "intrinsic", "name": "undefined"}], "name": "Selection"}}, {"id": 1444, "name": "height", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "max height"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1445, "name": "x", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "x coordinate"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1446, "name": "y", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "y coordinate"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1447, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "force rewrap"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}, {"id": 1448, "name": "linespacing", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "'auto' or number (default: 'auto')\n"}, "type": {"type": "intrinsic", "name": "string"}, "defaultValue": "'auto'"}], "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGTSpanElement"}, {"type": "intrinsic", "name": "number"}, {"type": "reference", "name": "SVGTextElement"}, {"type": "intrinsic", "name": "unknown"}], "name": "Selection"}}]}, {"id": 1437, "name": "centerTextVertically", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 238, "character": 36}], "signatures": [{"id": 1438, "name": "centerTextVertically", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Center a svg text element vertically around the y coordinate specified in the\n'data-text-center-y' attribute of the text element.", "text": "If the attribute is not set or cannot be parsed into a float this method does nothing.\n"}, "parameters": [{"id": 1439, "name": "text", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the text selection to center vertically around the attribute 'data-text-center-y'"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGTextElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "literal", "value": null}, {"type": "intrinsic", "name": "undefined"}], "name": "Selection"}}, {"id": 1440, "name": "multiline", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "true if the text is a multiline text containing tSpans\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1426, "name": "lTrim", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 124, "character": 21}], "signatures": [{"id": 1427, "name": "lTrim", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Trim leading whitespace"}, "parameters": [{"id": 1428, "name": "text", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "to trim\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 1423, "name": "rTrim", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 115, "character": 21}], "signatures": [{"id": 1424, "name": "rTrim", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Trim trailing whitespace"}, "parameters": [{"id": 1425, "name": "text", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "to trim\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 1420, "name": "trim", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 106, "character": 20}], "signatures": [{"id": 1421, "name": "trim", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Trim trailing and leading whitespace"}, "parameters": [{"id": 1422, "name": "text", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "to trim\n"}, "type": {"type": "intrinsic", "name": "string"}}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 1449, "name": "wrapSingleLine", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 334, "character": 30}], "signatures": [{"id": 1450, "name": "wrapSingleLine", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Wrap text in a single line and return the overflow.", "returns": "the overflow text\n"}, "parameters": [{"id": 1451, "name": "element", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "element to wraptext into"}, "type": {"type": "union", "types": [{"type": "reference", "name": "SVGTextElement"}, {"type": "reference", "name": "SVGTSpanElement"}]}}, {"id": 1452, "name": "width", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "max linewidth for text"}, "type": {"type": "intrinsic", "name": "number"}}, {"id": 1453, "name": "newText", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "new text to set"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1454, "name": "mode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "wrapping mode"}, "type": {"type": "intrinsic", "name": "string"}, "defaultValue": "'ellipsis'"}, {"id": 1455, "name": "wordBreak", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "break mode"}, "type": {"type": "intrinsic", "name": "string"}, "defaultValue": "'break-word'"}, {"id": 1456, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "force rewrap"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "string"}}]}, {"id": 1415, "name": "wrapText", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 37, "character": 24}], "signatures": [{"id": 1416, "name": "wrapText", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Wrap text in an svg text element.", "text": "Only wraps text if a 'width' or 'data-width' attribute is\npresent on text element.\n\nFor multiline wrapping an additional 'height' or 'data-height'\nattribute is neccessary.\n\nPartly uses css attributes 'text-overflow' and 'word-break'\nto determine how to wrap text.\n"}, "parameters": [{"id": 1417, "name": "element", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "element to wrap text into"}, "type": {"type": "reference", "name": "SVGTextElement"}}, {"id": 1418, "name": "newText", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "text to wrap"}, "type": {"type": "intrinsic", "name": "any"}}, {"id": 1419, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "force rewrap\n"}, "type": {"type": "intrinsic", "name": "boolean"}, "defaultValue": "false"}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1429, "name": "wrapTextLines", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "textwrap.ts", "line": 143, "character": 29}], "signatures": [{"id": 1430, "name": "wrapTextLines", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Wrap the text based on a supplied lines definition.", "text": "The lines definition is a string containing the maximum widths of the lines\nto wrap text into. The widths can be floats, are seperated by single spaces\nand parsed with `paseFloat`. Multiple line definitions are seperated by a\nsingle '|' character.\n"}, "parameters": [{"id": 1431, "name": "text", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the selection of the text element to wrap the text into"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGTextElement"}, {"type": "intrinsic", "name": "unknown"}, {"type": "literal", "value": null}, {"type": "intrinsic", "name": "undefined"}], "name": "Selection"}}, {"id": 1432, "name": "newText", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the new text to wrap"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1433, "name": "lines", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the line defs to use for wrapping"}, "type": {"type": "intrinsic", "name": "string"}}, {"id": 1434, "name": "overflowMode", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the overflow mode"}, "type": {"type": "intrinsic", "name": "any"}}, {"id": 1435, "name": "wordBreak", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "the word break mode"}, "type": {"type": "intrinsic", "name": "any"}}, {"id": 1436, "name": "force", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "if wrapping should be forced\n"}, "type": {"type": "intrinsic", "name": "boolean"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Functions", "kind": 64, "children": [1441, 1437, 1426, 1423, 1420, 1449, 1415, 1429]}], "sources": [{"fileName": "textwrap.ts", "line": 1, "character": 0}]}, {"id": 1457, "name": "util", "kind": 1, "kindString": "Module", "flags": {}, "children": [{"id": 1468, "name": "Rect", "kind": 256, "kindString": "Interface", "flags": {}, "comment": {"shortText": "Interface compatible with DOMRect and SVGRect."}, "children": [{"id": 1472, "name": "height", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The height of the rectangle. Must be `> 0`!"}, "sources": [{"fileName": "util.ts", "line": 29, "character": 10}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1471, "name": "width", "kind": 1024, "kindString": "Property", "flags": {}, "comment": {"shortText": "The width of the rectangle. Must be `> 0`!"}, "sources": [{"fileName": "util.ts", "line": 27, "character": 9}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1469, "name": "x", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "util.ts", "line": 24, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}, {"id": 1470, "name": "y", "kind": 1024, "kindString": "Property", "flags": {}, "sources": [{"fileName": "util.ts", "line": 25, "character": 5}], "type": {"type": "intrinsic", "name": "number"}}], "groups": [{"title": "Properties", "kind": 1024, "children": [1472, 1471, 1469, 1470]}], "sources": [{"fileName": "util.ts", "line": 23, "character": 21}]}, {"id": 1458, "name": "calculateBoundingRect", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "util.ts", "line": 37, "character": 37}], "signatures": [{"id": 1459, "name": "calculateBoundingRect", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Calculate the bounding rectangle of a set of rectangles."}, "parameters": [{"id": 1460, "name": "rectangles", "kind": 32768, "kindString": "Parameter", "flags": {"isRest": true}, "comment": {"text": "the rectangles to calculate the bounding rectangle for\n"}, "type": {"type": "array", "elementType": {"type": "reference", "id": 1468, "name": "Rect"}}}], "type": {"type": "reference", "id": 1468, "name": "Rect"}}]}, {"id": 1464, "name": "copyTemplateSelectionIntoNode", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "util.ts", "line": 97, "character": 45}], "signatures": [{"id": 1465, "name": "copyTemplateSelectionIntoNode", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Copy the child nodes of a template into the node selected in nodeSelection."}, "parameters": [{"id": 1466, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a d3 selection of a single empty svg element"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}, {"id": 1467, "name": "templateSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a d3 selection of a single svg element whose content is to be copied into node\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}, {"id": 1461, "name": "removeAllChildNodes", "kind": 64, "kindString": "Function", "flags": {}, "sources": [{"fileName": "util.ts", "line": 74, "character": 35}], "signatures": [{"id": 1462, "name": "removeAllChildNodes", "kind": 4096, "kindString": "Call signature", "flags": {}, "comment": {"shortText": "Remove all child nodes from a single node."}, "parameters": [{"id": 1463, "name": "nodeSelection", "kind": 32768, "kindString": "Parameter", "flags": {}, "comment": {"text": "a d3 selection of a single node that should be emptied\n"}, "type": {"type": "reference", "typeArguments": [{"type": "reference", "name": "SVGElement"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}, {"type": "intrinsic", "name": "any"}], "name": "Selection"}}], "type": {"type": "intrinsic", "name": "void"}}]}], "groups": [{"title": "Interfaces", "kind": 256, "children": [1468]}, {"title": "Functions", "kind": 64, "children": [1458, 1464, 1461]}], "sources": [{"fileName": "util.ts", "line": 1, "character": 0}]}], "groups": [{"title": "Modules", "kind": 1, "children": [1, 16, 98, 131, 151, 238, 751, 1026, 1067, 1027, 1101, 1128, 1142, 1200, 1328, 1348, 1414, 1457]}]}